{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\AlankHoang\\\\Desktop\\\\freecodeacademy\\\\shoppingBasket\\\\client\\\\src\\\\components\\\\SearchArea.js\";\nimport React, { Component } from \"react\";\nimport Autocomplete from 'react-google-autocomplete';\nimport Geocode from \"react-geocode\";\nGeocode.setApiKey('AIzaSyBiffp6dvrIk_EWQHzXk05VzFKb5tioZeI');\nGeocode.enableDebug();\nexport class SearchArea extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.onPlaceSelected = (place, event) => {\n      console.log(place);\n\n      if (place.name !== undefined) {\n        Geocode.fromname(place.name).then(response => {\n          const _response$results$0$g = response.results[0].geometry.location,\n                lat = _response$results$0$g.lat,\n                lng = _response$results$0$g.lng;\n          console.log(lat, lng);\n\n          if (lat === undefined) {\n            return null;\n          }\n\n          this.setState({\n            mapPosition: {\n              lat: lat,\n              lng: lng\n            },\n            markerPosition: {\n              lat: lat,\n              lng: lng\n            }\n          });\n        });\n        return;\n      } else {\n        const name = place.formatted_name,\n              latValue = place.geometry.location.lat(),\n              lngValue = place.geometry.location.lng(); // Set these values in the state.\n\n        this.setState({\n          mapPosition: {\n            lat: latValue,\n            lng: lngValue\n          },\n          markerPosition: {\n            lat: latValue,\n            lng: lngValue\n          }\n        });\n      }\n    };\n\n    this.mapmoved = () => {\n      console.log(\"drag:\" + JSON.stringify(this.state.map.getCenter()));\n    };\n\n    this.maploaded = map => {\n      if (this.state.map != null) {\n        return;\n      }\n\n      this.setState({\n        map: map\n      });\n    };\n\n    this.onZoom = () => {\n      console.log(\"zoom:\" + JSON.stringify(this.state.map.getCenter()));\n    };\n\n    this.searchBox = text => {\n      console.log(text);\n    };\n  }\n\n  render() {\n    console.log(this.props);\n    const AsyncMap = withScriptjs(withGoogleMap(props => React.createElement(GoogleMap, {\n      google: this.props.google,\n      ref: this.maploaded,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, React.createElement(Autocomplete, {\n      style: {\n        width: '200%',\n        height: '40px',\n        paddingLeft: '16px',\n        marginTop: '2px',\n        marginBottom: '100px'\n      },\n      onPlaceSelected: this.onPlaceSelected,\n      types: ['(regions)'],\n      placeholder: \"Enter and select location\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }))));\n    return React.createElement(\"div\", {\n      style: {\n        width: \"500px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, React.createElement(AsyncMap, {\n      googleMapURL: \"https://maps.googleapis.com/maps/api/js?key=AIzaSyBiffp6dvrIk_EWQHzXk05VzFKb5tioZeI&libraries=places\",\n      loadingElement: React.createElement(\"div\", {\n        style: {\n          height: \"100%\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }),\n      containerElement: React.createElement(\"div\", {\n        style: {\n          height: this.props.height\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }),\n      mapElement: React.createElement(\"div\", {\n        style: {\n          height: \"100%\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }));\n  }\n\n}\nexport default SearchArea;","map":{"version":3,"sources":["C:\\Users\\AlankHoang\\Desktop\\freecodeacademy\\shoppingBasket\\client\\src\\components\\SearchArea.js"],"names":["React","Component","Autocomplete","Geocode","setApiKey","enableDebug","SearchArea","onPlaceSelected","place","event","console","log","name","undefined","fromname","then","response","results","geometry","location","lat","lng","setState","mapPosition","markerPosition","formatted_name","latValue","lngValue","mapmoved","JSON","stringify","state","map","getCenter","maploaded","onZoom","searchBox","text","render","props","AsyncMap","withScriptjs","withGoogleMap","google","width","height","paddingLeft","marginTop","marginBottom"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\"\r\nimport Autocomplete from 'react-google-autocomplete';\r\nimport Geocode from \"react-geocode\";\r\n\r\n\r\n\r\nGeocode.setApiKey('AIzaSyBiffp6dvrIk_EWQHzXk05VzFKb5tioZeI');\r\nGeocode.enableDebug();\r\n\r\nexport class SearchArea extends Component {\r\n\r\n\tonPlaceSelected = ( place,event ) => {\r\n\t\tconsole.log(place)\r\n\t\tif (place.name!==undefined){\r\n\t\t\tGeocode.fromname(place.name).then(\r\n\t\t\t\tresponse => {\r\n    \t\t\tconst { lat, lng } = response.results[0].geometry.location\r\n    \t\t\tconsole.log(lat, lng)\r\n    \t\t\tif (lat ===undefined){\r\n    \t\t\t\treturn null\r\n    \t\t\t}\r\n    \t\t\tthis.setState({\r\n\t\t\t\t\tmapPosition: {\r\n\t\t\t\t\t\tlat: lat,\r\n\t\t\t\t\t\tlng: lng\r\n\t\t\t\t\t},\r\n\t\t\t\t\tmarkerPosition: {\r\n\t\t\t\t\t\tlat: lat,\r\n\t\t\t\t\t\tlng: lng\r\n\t\t\t\t},\r\n\t\t\t})\r\n    \t\t})\r\n\t\t\treturn\r\n\t\t}\r\n\t\telse{\r\n\t\t\tconst name = place.formatted_name,\r\n\t\t\tlatValue = place.geometry.location.lat(),\r\n\t\t\tlngValue = place.geometry.location.lng();\r\n\t\t\t// Set these values in the state.\r\n\t\t\tthis.setState({\r\n\r\n\t\t\t\tmapPosition: {\r\n\t\t\t\t\tlat: latValue,\r\n\t\t\t\t\tlng: lngValue\r\n\t\t\t\t},\r\n\t\t\t\tmarkerPosition: {\r\n\t\t\t\t\tlat: latValue,\r\n\t\t\t\t\tlng: lngValue\r\n\t\t\t\t},\r\n\t\t\t})\r\n\t}\r\n\r\n\t};\r\n\tmapmoved=()=>{\r\n\t\tconsole.log(\"drag:\"+JSON.stringify(this.state.map.getCenter()))\r\n\t}\r\n\tmaploaded=(map)=>{\r\n\t\tif (this.state.map !=null){\r\n\t\t\treturn\r\n\t\t}\r\n\t\tthis.setState({\r\n\t\t\tmap:map\r\n\t\t})\r\n\t\t\r\n\t}\r\n\tonZoom = ()=>{\r\n\t\tconsole.log(\"zoom:\"+JSON.stringify(this.state.map.getCenter()))\r\n\t}\r\n\tsearchBox = (text)=>{\r\n\t\tconsole.log(text)\r\n\t}\r\n\trender() {\r\n\t\tconsole.log(this.props)\r\n\tconst AsyncMap = withScriptjs(\r\n\t\twithGoogleMap(\r\n\t\t\tprops => (\r\n\t\t\t\t<GoogleMap \r\n\t\t\t\tgoogle={this.props.google}\r\n\t\t\t\tref = {this.maploaded}\r\n\t\t\t\t>\r\n\t\t\t\t\t<Autocomplete\r\n\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\twidth: '200%',\r\n\t\t\t\t\t\theight: '40px',\r\n\t\t\t\t\t\tpaddingLeft: '16px',\r\n\t\t\t\t\t\tmarginTop: '2px',\r\n\t\t\t\t\t\tmarginBottom: '100px'\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t\tonPlaceSelected={ this.onPlaceSelected }\r\n\t\t\t\t\t\ttypes={['(regions)']}\r\n\t\t\t\t\t\tplaceholder={\"Enter and select location\"}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\r\n\t\t\t\t</GoogleMap>\r\n\t\t\t)\r\n\t\t)\r\n\t)\r\n\r\n\t\r\n\r\n\treturn (\r\n\r\n\t\t\t <div style={{width:\"500px\"}}>\r\n\r\n\t\t\t\t<AsyncMap\r\n\t\t\t\t\tgoogleMapURL=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyBiffp6dvrIk_EWQHzXk05VzFKb5tioZeI&libraries=places\"\r\n\t\t\t\t\tloadingElement={\r\n\t\t\t\t\t <div style={{ height: `100%` }} />\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcontainerElement={\r\n\t\t\t\t\t <div style={{ height: this.props.height }} />\r\n\t\t\t\t\t}\r\n\t\t\t\t\tmapElement={\r\n\t\t\t\t\t <div style={{ height: `100%` }} />\r\n\t\t\t\t\t}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\r\n\r\n\t \r\n\t)\r\n  }\r\n}\r\n\r\nexport default SearchArea\r\n\r\n"]},"metadata":{},"sourceType":"module"}