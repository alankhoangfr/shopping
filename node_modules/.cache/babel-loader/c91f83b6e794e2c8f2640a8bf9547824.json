{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\AlankHoang\\\\Desktop\\\\freecodeacademy\\\\shoppingBasket\\\\client\\\\src\\\\components\\\\Map.js\";\nimport React, { Component } from 'react';\nimport { withGoogleMap, GoogleMap, withScriptjs, InfoWindow, Marker } from \"react-google-maps\";\nimport Geocode from \"react-geocode\";\nimport Autocomplete from 'react-google-autocomplete';\nimport StandaloneSearchBox from \"react-google-maps/lib/components/places/StandaloneSearchBox\";\nGeocode.setApiKey('AIzaSyBiffp6dvrIk_EWQHzXk05VzFKb5tioZeI');\nGeocode.enableDebug();\nexport class Map extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      mapPosition: {\n        lat: this.props.center.lat,\n        lng: this.props.center.lng\n      },\n      markerPosition: {\n        lat: this.props.center.lat,\n        lng: this.props.center.lng\n      },\n      map: null,\n      searchBox: null\n    };\n\n    this.onPlaceSelected = (place, event) => {\n      console.log(place);\n      const address = place.formatted_address,\n            latValue = place.geometry.location.lat(),\n            lngValue = place.geometry.location.lng(); // Set these values in the state.\n\n      this.setState({\n        mapPosition: {\n          lat: latValue,\n          lng: lngValue\n        },\n        markerPosition: {\n          lat: latValue,\n          lng: lngValue\n        }\n      });\n    };\n\n    this.mapmoved = () => {\n      console.log(\"drag:\" + JSON.stringify(this.state.map.getCenter()));\n    };\n\n    this.maploaded = map => {\n      if (this.state.map != null) {\n        return;\n      }\n\n      this.setState({\n        map: map\n      });\n    };\n\n    this.onZoom = () => {\n      console.log(\"zoom:\" + JSON.stringify(this.state.map.getCenter()));\n    };\n\n    this.onSearchBoxMounted = ref => {\n      this.state.searchBox = ref;\n      console.log(this.state);\n    };\n\n    this.searchBox = text => {\n      console.log(text);\n    };\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    console.log(nextProps);\n\n    if (nextState.mapPosition.lat !== this.state.mapPosition.lat) {\n      return true;\n    } else if (this.state.mapPosition.lat === nextState.mapPosition.lat) {\n      return false;\n    }\n  }\n\n  render() {\n    console.log(this.props);\n    const AsyncMap = withScriptjs(withGoogleMap(props => React.createElement(GoogleMap, {\n      google: this.props.google,\n      ref: this.maploaded,\n      defaultZoom: this.props.zoom,\n      defaultCenter: {\n        lat: this.state.mapPosition.lat,\n        lng: this.state.mapPosition.lng\n      },\n      onDragEnd: this.mapmoved,\n      onZoomChanged: this.onZoom,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, React.createElement(Marker, {\n      google: this.props.google,\n      name: 'Dolores park',\n      draggable: true,\n      position: {\n        lat: this.state.markerPosition.lat,\n        lng: this.state.markerPosition.lng\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }), React.createElement(Marker, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }), React.createElement(Autocomplete, {\n      style: {\n        width: '100%',\n        height: '40px',\n        paddingLeft: '16px',\n        marginTop: '2px',\n        marginBottom: '100px'\n      },\n      onPlaceSelected: this.onPlaceSelected,\n      types: ['(regions)'],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }), React.createElement(StandaloneSearchBox, {\n      ref: this.onSearchBoxMounted,\n      bounds: props.bounds,\n      onPlacesChanged: this.searchBox,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      placeholder: \"Customized your placeholder\",\n      style: {\n        boxSizing: \"border-box\",\n        border: \"1px solid transparent\",\n        width: \"240px\",\n        height: \"32px\",\n        padding: \"0 12px\",\n        borderRadius: \"3px\",\n        boxShadow: \"0 2px 6px rgba(0, 0, 0, 0.3)\",\n        fontSize: \"14px\",\n        outline: \"none\",\n        textOverflow: \"ellipses\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    })))));\n    return React.createElement(\"div\", {\n      style: {\n        width: \"500px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, React.createElement(AsyncMap, {\n      googleMapURL: \"https://maps.googleapis.com/maps/api/js?key=AIzaSyBiffp6dvrIk_EWQHzXk05VzFKb5tioZeI&libraries=places\",\n      loadingElement: React.createElement(\"div\", {\n        style: {\n          height: \"100%\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      }),\n      containerElement: React.createElement(\"div\", {\n        style: {\n          height: this.props.height\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      }),\n      mapElement: React.createElement(\"div\", {\n        style: {\n          height: \"100%\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }));\n  }\n\n}\nexport default Map;","map":{"version":3,"sources":["C:\\Users\\AlankHoang\\Desktop\\freecodeacademy\\shoppingBasket\\client\\src\\components\\Map.js"],"names":["React","Component","withGoogleMap","GoogleMap","withScriptjs","InfoWindow","Marker","Geocode","Autocomplete","StandaloneSearchBox","setApiKey","enableDebug","Map","state","mapPosition","lat","props","center","lng","markerPosition","map","searchBox","onPlaceSelected","place","event","console","log","address","formatted_address","latValue","geometry","location","lngValue","setState","mapmoved","JSON","stringify","getCenter","maploaded","onZoom","onSearchBoxMounted","ref","text","shouldComponentUpdate","nextProps","nextState","render","AsyncMap","google","zoom","width","height","paddingLeft","marginTop","marginBottom","bounds","boxSizing","border","padding","borderRadius","boxShadow","fontSize","outline","textOverflow"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { withGoogleMap, GoogleMap, withScriptjs, InfoWindow, Marker } from \"react-google-maps\";\r\nimport Geocode from \"react-geocode\";\r\nimport Autocomplete from 'react-google-autocomplete';\r\nimport StandaloneSearchBox from \"react-google-maps/lib/components/places/StandaloneSearchBox\"\r\n\r\nGeocode.setApiKey('AIzaSyBiffp6dvrIk_EWQHzXk05VzFKb5tioZeI');\r\nGeocode.enableDebug();\r\n\r\n\r\nexport class Map extends Component {\r\n    state = {\r\n        mapPosition:{\r\n            lat: this.props.center.lat,\r\n            lng: this.props.center.lng\r\n        },\r\n        markerPosition:{\r\n            lat:this.props.center.lat,\r\n            lng:this.props.center.lng\r\n        },\r\n        map:null,\r\n        searchBox: null,\r\n    }\r\n    shouldComponentUpdate( nextProps, nextState ){\r\n        console.log(nextProps)\r\n        if (\r\n        nextState.mapPosition.lat !== this.state.mapPosition.lat \r\n        ) {\r\n        return true\r\n        } else if ( this.state.mapPosition.lat  === nextState.mapPosition.lat ){\r\n        return false\r\n        }\r\n     }\r\n    onPlaceSelected = ( place,event ) => {\r\n        console.log(place)\r\n        const address = place.formatted_address,\r\n        latValue = place.geometry.location.lat(),\r\n        lngValue = place.geometry.location.lng();\r\n        // Set these values in the state.\r\n        this.setState({\r\n\r\n            mapPosition: {\r\n                lat: latValue,\r\n                lng: lngValue\r\n            },\r\n            markerPosition: {\r\n                lat: latValue,\r\n                lng: lngValue\r\n            },\r\n        })\r\n    };\r\n    mapmoved=()=>{\r\n        console.log(\"drag:\"+JSON.stringify(this.state.map.getCenter()))\r\n    }\r\n    maploaded=(map)=>{\r\n        if (this.state.map !=null){\r\n            return\r\n        }\r\n        this.setState({\r\n            map:map\r\n        })\r\n        \r\n    }\r\n    onZoom = ()=>{\r\n        console.log(\"zoom:\"+JSON.stringify(this.state.map.getCenter()))\r\n    }\r\n    onSearchBoxMounted = (ref) => {\r\n          this.state.searchBox = ref\r\n          console.log(this.state)\r\n        }\r\n    searchBox = (text)=>{\r\n        console.log(text)\r\n    }\r\n    render() {\r\n        console.log(this.props)\r\n    const AsyncMap = withScriptjs(\r\n        withGoogleMap(\r\n            props => (\r\n                <GoogleMap \r\n                google={this.props.google}\r\n                ref = {this.maploaded}\r\n                defaultZoom={this.props.zoom}\r\n                defaultCenter={{ lat: this.state.mapPosition.lat, lng: this.state.mapPosition.lng }}\r\n                onDragEnd={this.mapmoved}\r\n                onZoomChanged = {this.onZoom}\r\n                >\r\n                    <Marker google={this.props.google}\r\n                        name={'Dolores park'}\r\n                        draggable={true}\r\n                        position={{ lat: this.state.markerPosition.lat, lng: this.state.markerPosition.lng }}\r\n                    />\r\n                    <Marker />\r\n                    <Autocomplete\r\n                        style={{\r\n                        width: '100%',\r\n                        height: '40px',\r\n                        paddingLeft: '16px',\r\n                        marginTop: '2px',\r\n                        marginBottom: '100px'\r\n                        }}\r\n                        onPlaceSelected={ this.onPlaceSelected }\r\n                        types={['(regions)']}\r\n                    />\r\n                    <StandaloneSearchBox\r\n                      ref={this.onSearchBoxMounted}\r\n                      bounds={props.bounds}\r\n                      onPlacesChanged={this.searchBox}\r\n                    >\r\n                      <input\r\n                        type=\"text\"\r\n                        placeholder=\"Customized your placeholder\"\r\n                        style={{\r\n                          boxSizing: `border-box`,\r\n                          border: `1px solid transparent`,\r\n                          width: `240px`,\r\n                          height: `32px`,\r\n                          padding: `0 12px`,\r\n                          borderRadius: `3px`,\r\n                          boxShadow: `0 2px 6px rgba(0, 0, 0, 0.3)`,\r\n                          fontSize: `14px`,\r\n                          outline: `none`,\r\n                          textOverflow: `ellipses`\r\n                        }}\r\n                      />\r\n                    </StandaloneSearchBox>\r\n                </GoogleMap>\r\n            )\r\n        )\r\n    )\r\n\r\n    \r\n\r\n    return (\r\n         <div style={{width:\"500px\"}}>\r\n\r\n            <AsyncMap\r\n                googleMapURL=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyBiffp6dvrIk_EWQHzXk05VzFKb5tioZeI&libraries=places\"\r\n                loadingElement={\r\n                 <div style={{ height: `100%` }} />\r\n                }\r\n                containerElement={\r\n                 <div style={{ height: this.props.height }} />\r\n                }\r\n                mapElement={\r\n                 <div style={{ height: `100%` }} />\r\n                }\r\n            />\r\n        </div>\r\n\r\n     \r\n    )\r\n  }\r\n}\r\n\r\nexport default Map"]},"metadata":{},"sourceType":"module"}