{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\AlankHoang\\\\Desktop\\\\freecodeacademy\\\\shoppingBasket\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\AlankHoang\\\\Desktop\\\\freecodeacademy\\\\shoppingBasket\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar fileUtils = require('././util/fileUtils');\n\nvar stringUtils = require('././util/stringUtils');\n\nvar jsonUtils = require('././util/jsonUtils');\n\nvar newLine = /\\r?\\n/;\nvar defaultFieldDelimiter = ';';\n\nvar CsvToJson =\n/*#__PURE__*/\nfunction () {\n  function CsvToJson() {\n    _classCallCheck(this, CsvToJson);\n  }\n\n  _createClass(CsvToJson, [{\n    key: \"formatValueByType\",\n    value: function formatValueByType() {\n      this.printValueFormatByType = true;\n      return this;\n    }\n  }, {\n    key: \"fieldDelimiter\",\n    value: function fieldDelimiter(delimieter) {\n      this.delimiter = delimieter;\n      return this;\n    }\n  }, {\n    key: \"generateJsonFileFromCsv\",\n    value: function generateJsonFileFromCsv(fileInputName, fileOutputName) {\n      var jsonStringified = this.getJsonFromCsvStringified(fileInputName);\n      fileUtils.writeFile(jsonStringified, fileOutputName);\n    }\n  }, {\n    key: \"getJsonFromCsvStringified\",\n    value: function getJsonFromCsvStringified(fileInputName) {\n      var json = this.getJsonFromCsv(fileInputName);\n      var jsonStringified = JSON.stringify(json, undefined, 1);\n      jsonUtils.validateJson(jsonStringified);\n      return jsonStringified;\n    }\n  }, {\n    key: \"getJsonFromCsv\",\n    value: function getJsonFromCsv(fileInputName) {\n      var parsedCsv = fileUtils.readFile(fileInputName);\n      return this.csvToJson(parsedCsv);\n    }\n  }, {\n    key: \"csvToJson\",\n    value: function csvToJson(parsedCsv) {\n      var lines = parsedCsv.split(newLine);\n      var fieldDelimiter = this.getFieldDelimiter();\n      var headers = lines[0].split(fieldDelimiter);\n      var jsonResult = [];\n\n      for (var i = 1; i < lines.length; i++) {\n        var currentLine = lines[i].split(fieldDelimiter);\n\n        if (stringUtils.hasContent(currentLine)) {\n          jsonResult.push(this.buildJsonResult(headers, currentLine));\n        }\n      }\n\n      return jsonResult;\n    }\n  }, {\n    key: \"getFieldDelimiter\",\n    value: function getFieldDelimiter() {\n      if (this.delimiter) {\n        return this.delimiter;\n      }\n\n      return defaultFieldDelimiter;\n    }\n  }, {\n    key: \"buildJsonResult\",\n    value: function buildJsonResult(headers, currentLine) {\n      var jsonObject = {};\n\n      for (var j = 0; j < headers.length; j++) {\n        var propertyName = stringUtils.trimPropertyName(headers[j]);\n        var value = currentLine[j];\n\n        if (this.printValueFormatByType) {\n          value = stringUtils.getValueFormatByType(currentLine[j]);\n        }\n\n        jsonObject[propertyName] = value;\n      }\n\n      return jsonObject;\n    }\n  }]);\n\n  return CsvToJson;\n}();\n\nmodule.exports = new CsvToJson();","map":null,"metadata":{},"sourceType":"script"}