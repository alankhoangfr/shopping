{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\AlankHoang\\\\Desktop\\\\freecodeacademy\\\\shoppingbasket\\\\client\\\\src\\\\components\\\\AddShop\\\\Shop.js\";\nimport React, { Component } from \"react\";\nimport { withGoogleMap, GoogleMap, withScriptjs, Marker } from \"react-google-maps\";\nimport Autocomplete from 'react-google-autocomplete';\nimport Geocode from \"react-geocode\";\nGeocode.setApiKey(\"AIzaSyBiffp6dvrIk_EWQHzXk05VzFKb5tioZeI\");\nGeocode.enableDebug();\n\nclass Shop extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getStreetNumber = addressArray => {\n      let StreetNumber = '';\n\n      for (let i = 0; i < addressArray.length; i++) {\n        if (addressArray[i].types[0] && 'street_number' === addressArray[i].types[0]) {\n          StreetNumber = addressArray[i].long_name;\n          return StreetNumber;\n        }\n      }\n    };\n\n    this.getStreet = addressArray => {\n      let Street = '';\n\n      for (let i = 0; i < addressArray.length; i++) {\n        if (addressArray[i].types[0] && 'route' === addressArray[i].types[0]) {\n          Street = addressArray[i].long_name;\n          return Street;\n        }\n      }\n    };\n\n    this.getPostcode = addressArray => {\n      let postcode = '';\n\n      for (let i = 0; i < addressArray.length; i++) {\n        if (addressArray[i].types[0] && 'postal_code' === addressArray[i].types[0]) {\n          postcode = addressArray[i].long_name;\n          return postcode;\n        }\n      }\n    };\n\n    this.getCity = addressArray => {\n      let city = '';\n\n      for (let i = 0; i < addressArray.length; i++) {\n        if (addressArray[i].types[0]) {\n          for (let j = 0; j < addressArray[i].types.length; j++) {\n            if ('sublocality_level_1' === addressArray[i].types[j] || 'locality' === addressArray[i].types[j]) {\n              city = addressArray[i].long_name;\n              return city;\n            }\n          }\n        }\n      }\n    };\n\n    this.getState = addressArray => {\n      let state = '';\n\n      for (let i = 0; i < addressArray.length; i++) {\n        for (let i = 0; i < addressArray.length; i++) {\n          if (addressArray[i].types[0] && 'administrative_area_level_1' === addressArray[i].types[0]) {\n            state = addressArray[i].short_name;\n            return state;\n          }\n        }\n      }\n    };\n\n    this.onPlaceSelected = (place, event) => {\n      console.log(place);\n\n      if (place.name !== undefined) {\n        Geocode.fromAddress(place.name).then(response => {\n          const _response$results$0$g = response.results[0].geometry.location,\n                lat = _response$results$0$g.lat,\n                lng = _response$results$0$g.lng;\n          console.log(lat, lng);\n\n          if (lat === undefined) {\n            return null;\n          }\n\n          this.setState({\n            mapPosition: {\n              lat: lat,\n              lng: lng\n            },\n            markerPosition: {\n              lat: lat,\n              lng: lng\n            }\n          });\n        });\n      } else {\n        const name = place.formatted_name,\n              latValue = place.geometry.location.lat(),\n              lngValue = place.geometry.location.lng(); // Set these values in the state.\n\n        this.setState({\n          mapPosition: {\n            lat: latValue,\n            lng: lngValue\n          },\n          markerPosition: {\n            lat: latValue,\n            lng: lngValue\n          }\n        });\n      }\n    };\n\n    this.onMarkerDragEnd = event => {\n      console.log('event', event);\n      let newLat = event.latLng.lat(),\n          newLng = event.latLng.lng(),\n          addressArray = [];\n      Geocode.fromLatLng(newLat, newLng).then(response => {\n        const completeAddress = response.results[0].formatted_address,\n              addressArray = response.results[0].address_components,\n              street_number = this.getStreetNumber(addressArray),\n              street = this.getStreet(addressArray),\n              city = this.getCity(addressArray),\n              postcode = this.getPostcode(addressArray),\n              state = this.getState(addressArray),\n              address = street_number + \" \" + street;\n        this.props.markerInfo({\n          completeAddress: completeAddress ? completeAddress : '',\n          address: address ? address : '',\n          postcode: postcode ? postcode : '',\n          city: city ? city : '',\n          state: state ? state : '',\n          markerPosition: {\n            lat: newLat,\n            lng: newLng\n          },\n          mapPosition: {\n            lat: newLat,\n            lng: newLng\n          }\n        });\n        this.setState({\n          markerPosition: {\n            lat: newLat,\n            lng: newLng\n          }\n        });\n      }, error => {\n        console.error(error);\n      });\n    };\n\n    this.state = {\n      completeAddress: \"\",\n      address: '',\n      city: '',\n      postcode: '',\n      state: ''\n    };\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    console.log(\"shop shouldComponentUpdate\", nextProps, this.props, nextState, this.state);\n\n    if (this.props.mapPosition.lat !== nextProps.mapPosition.lat || this.state.address !== nextState.address || this.state.city !== nextState.city || this.state.area !== nextState.area || this.state.state !== nextState.state) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  render() {\n    console.log(\"shop\", this.state, this.props);\n    const AsyncMap = withScriptjs(withGoogleMap(props => React.createElement(GoogleMap, {\n      google: this.props.google,\n      defaultZoom: this.props.zoom,\n      center: {\n        lat: this.props.mapPosition.lat,\n        lng: this.props.mapPosition.lng\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }, React.createElement(Marker, {\n      google: this.props.google,\n      draggable: true,\n      onDragEnd: this.onMarkerDragEnd,\n      position: {\n        lat: this.props.markerPosition.lat,\n        lng: this.props.markerPosition.lng\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }), React.createElement(Marker, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }), React.createElement(Autocomplete, {\n      style: {\n        width: '100%',\n        height: '40px',\n        paddingLeft: '16px',\n        margin: \"2px auto 0px auto\"\n      },\n      onPlaceSelected: this.onPlaceSelected,\n      types: ['(regions)'],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }))));\n    let map;\n\n    if (this.props.mapPosition.lat !== undefined) {\n      map = React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206\n        },\n        __self: this\n      }, React.createElement(AsyncMap, {\n        googleMapURL: \"https://maps.googleapis.com/maps/api/js?key=AIzaSyBiffp6dvrIk_EWQHzXk05VzFKb5tioZeI&libraries=places\",\n        loadingElement: React.createElement(\"div\", {\n          style: {\n            height: \"100%\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 210\n          },\n          __self: this\n        }),\n        containerElement: React.createElement(\"div\", {\n          style: {\n            height: this.props.height,\n            display: \"flex\",\n            flexDirection: \"column-reverse\",\n            marginTop: \"20px\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 212\n          },\n          __self: this\n        }),\n        mapElement: React.createElement(\"div\", {\n          style: {\n            height: \"100%\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 217\n          },\n          __self: this\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207\n        },\n        __self: this\n      }));\n    } else {\n      map = React.createElement(\"div\", {\n        style: {\n          height: this.props.height\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 221\n        },\n        __self: this\n      });\n    }\n\n    return map;\n  }\n\n}\n\nexport default Shop;","map":{"version":3,"sources":["C:\\Users\\AlankHoang\\Desktop\\freecodeacademy\\shoppingbasket\\client\\src\\components\\AddShop\\Shop.js"],"names":["React","Component","withGoogleMap","GoogleMap","withScriptjs","Marker","Autocomplete","Geocode","setApiKey","enableDebug","Shop","constructor","props","getStreetNumber","addressArray","StreetNumber","i","length","types","long_name","getStreet","Street","getPostcode","postcode","getCity","city","j","getState","state","short_name","onPlaceSelected","place","event","console","log","name","undefined","fromAddress","then","response","results","geometry","location","lat","lng","setState","mapPosition","markerPosition","formatted_name","latValue","lngValue","onMarkerDragEnd","newLat","latLng","newLng","fromLatLng","completeAddress","formatted_address","address_components","street_number","street","address","markerInfo","error","shouldComponentUpdate","nextProps","nextState","area","render","AsyncMap","google","zoom","width","height","paddingLeft","margin","map","display","flexDirection","marginTop"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\"\r\nimport { withGoogleMap, GoogleMap, withScriptjs, Marker } from \"react-google-maps\";\r\nimport Autocomplete from 'react-google-autocomplete';\r\nimport Geocode from \"react-geocode\";\r\nGeocode.setApiKey(\"AIzaSyBiffp6dvrIk_EWQHzXk05VzFKb5tioZeI\");\r\nGeocode.enableDebug();\r\n\r\n\r\nclass Shop extends React.Component{\r\n    constructor( props ){\r\n        super( props );\r\n        this.state = {\r\n            completeAddress :\"\",\r\n            address: '',\r\n            city: '',\r\n            postcode: '',\r\n            state: '',\r\n        }\r\n    }\r\n\r\n    shouldComponentUpdate( nextProps, nextState ){\r\n        console.log(\"shop shouldComponentUpdate\",nextProps,this.props,nextState,this.state)\r\n        if (\r\n            this.props.mapPosition.lat !== nextProps.mapPosition.lat ||\r\n            this.state.address !== nextState.address ||\r\n            this.state.city !== nextState.city ||\r\n            this.state.area !== nextState.area ||\r\n            this.state.state !== nextState.state\r\n        ){return true\r\n        } else { return false\r\n        }\r\n    }\r\n\r\n    getStreetNumber = ( addressArray ) => {\r\n        let StreetNumber = '';\r\n        for( let i = 0; i < addressArray.length; i++ ) {\r\n            if ( addressArray[ i ].types[0] && 'street_number' === addressArray[ i ].types[0] ) {\r\n                StreetNumber = addressArray[ i ].long_name;\r\n                return StreetNumber;\r\n            }\r\n        }\r\n    }\r\n\r\n    getStreet = ( addressArray ) => {\r\n        let Street = '';\r\n        for( let i = 0; i < addressArray.length; i++ ) {\r\n            if ( addressArray[ i ].types[0] && 'route' === addressArray[ i ].types[0] ) {\r\n                Street = addressArray[ i ].long_name;\r\n                return Street;\r\n            }\r\n        }\r\n    }\r\n\r\n    getPostcode = ( addressArray ) => {\r\n        let postcode = '';\r\n        for( let i = 0; i < addressArray.length; i++ ) {\r\n            if ( addressArray[ i ].types[0] && 'postal_code' === addressArray[ i ].types[0] ) {\r\n                postcode = addressArray[ i ].long_name;\r\n                return postcode;\r\n            }\r\n        }\r\n    };\r\n\r\n    getCity = ( addressArray ) => {\r\n        let city = '';\r\n        for( let i = 0; i < addressArray.length; i++ ) {\r\n            if ( addressArray[ i ].types[0]  ) {\r\n            for ( let j = 0; j < addressArray[ i ].types.length; j++ ) {\r\n                if ( 'sublocality_level_1' === addressArray[ i ].types[j] || 'locality' === addressArray[ i ].types[j] ) {\r\n                    city = addressArray[ i ].long_name;\r\n                    return city;\r\n                }\r\n            }\r\n        }\r\n        }\r\n    };\r\n\r\n    getState = ( addressArray ) => {\r\n    let state = '';\r\n        for( let i = 0; i < addressArray.length; i++ ) {\r\n            for( let i = 0; i < addressArray.length; i++ ) {\r\n                if ( addressArray[ i ].types[0] && 'administrative_area_level_1' === addressArray[ i ].types[0] ) {\r\n                    state = addressArray[ i ].short_name;\r\n                    return state;\r\n                }\r\n            }\r\n        }\r\n    };\r\n    onPlaceSelected = ( place,event ) => {\r\n        console.log(place)\r\n        if (place.name!==undefined){\r\n            Geocode.fromAddress(place.name).then(\r\n                response => {\r\n                const { lat, lng } = response.results[0].geometry.location\r\n                console.log(lat, lng)\r\n                if (lat ===undefined){\r\n                    return null\r\n                }\r\n                this.setState({\r\n                    mapPosition: {\r\n                        lat: lat,\r\n                        lng: lng\r\n                    },\r\n                    markerPosition: {\r\n                        lat: lat,\r\n                        lng: lng\r\n                    },\r\n            })\r\n            })\r\n        }\r\n        else{\r\n            const name = place.formatted_name,\r\n            latValue = place.geometry.location.lat(),\r\n            lngValue = place.geometry.location.lng();\r\n            // Set these values in the state.\r\n            this.setState({\r\n                mapPosition: {\r\n                    lat: latValue,\r\n                    lng: lngValue\r\n                },\r\n                 markerPosition: {\r\n                    lat: latValue,\r\n                    lng: lngValue\r\n                },\r\n                \r\n\r\n            })\r\n        }\r\n    }\r\n    onMarkerDragEnd = ( event ) => {\r\n        console.log( 'event', event );\r\n        let newLat = event.latLng.lat(),\r\n        newLng = event.latLng.lng(),\r\n        addressArray = [];\r\n        Geocode.fromLatLng( newLat , newLng ).then(\r\n        response => {\r\n            const completeAddress = response.results[0].formatted_address,\r\n            addressArray =  response.results[0].address_components,\r\n            street_number =this.getStreetNumber(addressArray),\r\n            street =this.getStreet(addressArray),\r\n            city = this.getCity( addressArray ),\r\n            postcode = this.getPostcode( addressArray ),\r\n            state = this.getState( addressArray ),\r\n            address = street_number +\" \"+street\r\n            this.props.markerInfo({\r\n                completeAddress: ( completeAddress ) ? completeAddress : '',\r\n                address: ( address ) ? address : '',\r\n                postcode: ( postcode ) ? postcode : '',\r\n                city: ( city ) ? city : '',\r\n                state: ( state ) ? state : '',\r\n                markerPosition: {\r\n                lat: newLat,\r\n                lng: newLng\r\n                },\r\n                mapPosition: {\r\n                lat: newLat,\r\n                lng: newLng\r\n                },\r\n                } )\r\n            this.setState({\r\n                markerPosition: {\r\n                lat: newLat,\r\n                lng: newLng\r\n                },\r\n            })\r\n        },\r\n\r\n        error => {\r\n            console.error(error);\r\n        }\r\n    );\r\n    };\r\n    render(){\r\n        console.log(\"shop\",this.state,this.props)\r\n        const AsyncMap = withScriptjs(\r\n            withGoogleMap(\r\n                props => (\r\n                    <GoogleMap google={this.props.google}\r\n                        defaultZoom={this.props.zoom}\r\n                        center={{ lat: this.props.mapPosition.lat, lng: this.props.mapPosition.lng }}\r\n                    >\r\n                        <Marker \r\n                            google={this.props.google}\r\n                            draggable ={true}\r\n                            onDragEnd = {this.onMarkerDragEnd}\r\n                            position={{ lat: this.props.markerPosition.lat, lng: this.props.markerPosition.lng }}\r\n                        />\r\n                        <Marker />\r\n                        <Autocomplete\r\n                            style={{\r\n                            width: '100%',\r\n                            height: '40px',\r\n                            paddingLeft: '16px',\r\n                            margin:\"2px auto 0px auto\",\r\n                            }}\r\n                            onPlaceSelected={ this.onPlaceSelected }\r\n                            types={['(regions)']}\r\n                        />\r\n                    </GoogleMap>\r\n                )\r\n            )\r\n        );\r\n        let map;\r\n        if( this.props.mapPosition.lat !== undefined ) {\r\n        map = \r\n            <React.Fragment>\r\n                <AsyncMap\r\n                    googleMapURL=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyBiffp6dvrIk_EWQHzXk05VzFKb5tioZeI&libraries=places\"\r\n                    loadingElement={\r\n                        <div style={{ height: `100%` }} />}\r\n                    containerElement={\r\n                        <div style={{   height: this.props.height,\r\n                            display: \"flex\",\r\n                            flexDirection: \"column-reverse\",\r\n                            marginTop:\"20px\"}} /> }\r\n                    mapElement={\r\n                        <div style={{ height: `100%` }} />}\r\n                />\r\n            </React.Fragment>\r\n        } else {\r\n        map = <div style={{height: this.props.height}} />\r\n        }\r\n        \r\n    return( map )\r\n    }\r\n}\r\n    \r\n\r\nexport default Shop"]},"metadata":{},"sourceType":"module"}