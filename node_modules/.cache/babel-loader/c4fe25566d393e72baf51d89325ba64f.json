{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\AlankHoang\\\\Desktop\\\\freecodeacademy\\\\shoppingBasket\\\\client\\\\src\\\\components\\\\Map.js\";\nimport React, { Component } from 'react';\nimport { withGoogleMap, GoogleMap, withScriptjs, InfoWindow, Marker } from \"react-google-maps\";\nimport Geocode from \"react-geocode\";\nimport Autocomplete from 'react-google-autocomplete';\nGeocode.setApiKey('AIzaSyBiffp6dvrIk_EWQHzXk05VzFKb5tioZeI');\nGeocode.enableDebug();\nexport class Map extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      mapPosition: {\n        lat: this.props.center.lat,\n        lng: this.props.center.lng\n      },\n      markerPosition: {\n        lat: this.props.center.lat,\n        lng: this.props.center.lng\n      }\n    };\n\n    this.onPlaceSelected = place => {\n      console.log(place);\n      const address = place.formatted_address,\n            latValue = place.geometry.location.lat(),\n            lngValue = place.geometry.location.lng(); // Set these values in the state.\n\n      this.setState({\n        markerPosition: {\n          lat: latValue,\n          lng: lngValue\n        },\n        mapPosition: {\n          lat: latValue,\n          lng: lngValue\n        }\n      });\n    };\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (this.state.markerPosition.lat !== this.props.center.lat) {\n      return true;\n    } else if (this.props.center.lat === nextProps.center.lat) {\n      return false;\n    }\n  }\n\n  render() {\n    const AsyncMap = withScriptjs(withGoogleMap(props => React.createElement(GoogleMap, {\n      google: this.props.google,\n      defaultZoom: this.props.zoom,\n      defaultCenter: {\n        lat: this.state.mapPosition.lat,\n        lng: this.state.mapPosition.lng\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, React.createElement(Marker, {\n      google: this.props.google,\n      name: 'Dolores park',\n      draggable: true,\n      position: {\n        lat: this.state.markerPosition.lat,\n        lng: this.state.markerPosition.lng\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }), React.createElement(Marker, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }), React.createElement(Autocomplete, {\n      style: {\n        width: '100%',\n        height: '40px',\n        paddingLeft: '16px',\n        marginTop: '2px',\n        marginBottom: '100px'\n      },\n      onPlaceSelected: this.onPlaceSelected,\n      types: ['(regions)'],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }))));\n    return React.createElement(\"div\", {\n      style: {\n        width: \"500px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, React.createElement(AsyncMap, {\n      googleMapURL: \"https://maps.googleapis.com/maps/api/js?key=AIzaSyBiffp6dvrIk_EWQHzXk05VzFKb5tioZeI&libraries=places\",\n      loadingElement: React.createElement(\"div\", {\n        style: {\n          height: \"100%\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }),\n      containerElement: React.createElement(\"div\", {\n        style: {\n          height: this.props.height\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }),\n      mapElement: React.createElement(\"div\", {\n        style: {\n          height: \"100%\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }));\n  }\n\n}\nexport default Map;","map":{"version":3,"sources":["C:\\Users\\AlankHoang\\Desktop\\freecodeacademy\\shoppingBasket\\client\\src\\components\\Map.js"],"names":["React","Component","withGoogleMap","GoogleMap","withScriptjs","InfoWindow","Marker","Geocode","Autocomplete","setApiKey","enableDebug","Map","state","mapPosition","lat","props","center","lng","markerPosition","onPlaceSelected","place","console","log","address","formatted_address","latValue","geometry","location","lngValue","setState","shouldComponentUpdate","nextProps","nextState","render","AsyncMap","google","zoom","width","height","paddingLeft","marginTop","marginBottom"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,aAAT,EAAwBC,SAAxB,EAAmCC,YAAnC,EAAiDC,UAAjD,EAA6DC,MAA7D,QAA2E,mBAA3E;AACA,OAAOC,OAAP,MAAoB,eAApB;AACA,OAAOC,YAAP,MAAyB,2BAAzB;AACAD,OAAO,CAACE,SAAR,CAAkB,yCAAlB;AACAF,OAAO,CAACG,WAAR;AAGA,OAAO,MAAMC,GAAN,SAAkBV,SAAlB,CAA4B;AAAA;AAAA;AAAA,SAC/BW,KAD+B,GACvB;AACJC,MAAAA,WAAW,EAAC;AACRC,QAAAA,GAAG,EAAE,KAAKC,KAAL,CAAWC,MAAX,CAAkBF,GADf;AAERG,QAAAA,GAAG,EAAE,KAAKF,KAAL,CAAWC,MAAX,CAAkBC;AAFf,OADR;AAKJC,MAAAA,cAAc,EAAC;AACXJ,QAAAA,GAAG,EAAC,KAAKC,KAAL,CAAWC,MAAX,CAAkBF,GADX;AAEXG,QAAAA,GAAG,EAAC,KAAKF,KAAL,CAAWC,MAAX,CAAkBC;AAFX;AALX,KADuB;;AAAA,SAoB/BE,eApB+B,GAoBXC,KAAF,IAAa;AAC3BC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,YAAMG,OAAO,GAAGH,KAAK,CAACI,iBAAtB;AAAA,YACAC,QAAQ,GAAGL,KAAK,CAACM,QAAN,CAAeC,QAAf,CAAwBb,GAAxB,EADX;AAAA,YAEAc,QAAQ,GAAGR,KAAK,CAACM,QAAN,CAAeC,QAAf,CAAwBV,GAAxB,EAFX,CAF2B,CAK3B;;AACA,WAAKY,QAAL,CAAc;AACdX,QAAAA,cAAc,EAAE;AAChBJ,UAAAA,GAAG,EAAEW,QADW;AAEhBR,UAAAA,GAAG,EAAEW;AAFW,SADF;AAKdf,QAAAA,WAAW,EAAE;AACbC,UAAAA,GAAG,EAAEW,QADQ;AAEbR,UAAAA,GAAG,EAAEW;AAFQ;AALC,OAAd;AAUH,KApC8B;AAAA;;AAW/BE,EAAAA,qBAAqB,CAAEC,SAAF,EAAaC,SAAb,EAAwB;AACzC,QACA,KAAKpB,KAAL,CAAWM,cAAX,CAA0BJ,GAA1B,KAAkC,KAAKC,KAAL,CAAWC,MAAX,CAAkBF,GADpD,EAEE;AACF,aAAO,IAAP;AACC,KAJD,MAIO,IAAK,KAAKC,KAAL,CAAWC,MAAX,CAAkBF,GAAlB,KAA0BiB,SAAS,CAACf,MAAV,CAAiBF,GAAhD,EAAqD;AAC5D,aAAO,KAAP;AACC;AACH;;AAmBFmB,EAAAA,MAAM,GAAG;AACT,UAAMC,QAAQ,GAAG9B,YAAY,CACzBF,aAAa,CACTa,KAAK,IACD,oBAAC,SAAD;AAAW,MAAA,MAAM,EAAE,KAAKA,KAAL,CAAWoB,MAA9B;AACA,MAAA,WAAW,EAAE,KAAKpB,KAAL,CAAWqB,IADxB;AAEA,MAAA,aAAa,EAAE;AAAEtB,QAAAA,GAAG,EAAE,KAAKF,KAAL,CAAWC,WAAX,CAAuBC,GAA9B;AAAmCG,QAAAA,GAAG,EAAE,KAAKL,KAAL,CAAWC,WAAX,CAAuBI;AAA/D,OAFf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAII,oBAAC,MAAD;AAAQ,MAAA,MAAM,EAAE,KAAKF,KAAL,CAAWoB,MAA3B;AACI,MAAA,IAAI,EAAE,cADV;AAEI,MAAA,SAAS,EAAE,IAFf;AAGI,MAAA,QAAQ,EAAE;AAAErB,QAAAA,GAAG,EAAE,KAAKF,KAAL,CAAWM,cAAX,CAA0BJ,GAAjC;AAAsCG,QAAAA,GAAG,EAAE,KAAKL,KAAL,CAAWM,cAAX,CAA0BD;AAArE,OAHd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJJ,EASI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MATJ,EAUI,oBAAC,YAAD;AACI,MAAA,KAAK,EAAE;AACPoB,QAAAA,KAAK,EAAE,MADA;AAEPC,QAAAA,MAAM,EAAE,MAFD;AAGPC,QAAAA,WAAW,EAAE,MAHN;AAIPC,QAAAA,SAAS,EAAE,KAJJ;AAKPC,QAAAA,YAAY,EAAE;AALP,OADX;AAQI,MAAA,eAAe,EAAG,KAAKtB,eAR3B;AASI,MAAA,KAAK,EAAE,CAAC,WAAD,CATX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAVJ,CAFK,CADY,CAA7B;AA+BA,WACK;AAAK,MAAA,KAAK,EAAE;AAACkB,QAAAA,KAAK,EAAC;AAAP,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEG,oBAAC,QAAD;AACI,MAAA,YAAY,EAAC,sGADjB;AAEI,MAAA,cAAc,EACb;AAAK,QAAA,KAAK,EAAE;AAAEC,UAAAA,MAAM;AAAR,SAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHL;AAKI,MAAA,gBAAgB,EACf;AAAK,QAAA,KAAK,EAAE;AAAEA,UAAAA,MAAM,EAAE,KAAKvB,KAAL,CAAWuB;AAArB,SAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QANL;AAQI,MAAA,UAAU,EACT;AAAK,QAAA,KAAK,EAAE;AAAEA,UAAAA,MAAM;AAAR,SAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QATL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFH,CADL;AAkBD;;AAxFgC;AA2FnC,eAAe3B,GAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport { withGoogleMap, GoogleMap, withScriptjs, InfoWindow, Marker } from \"react-google-maps\";\r\nimport Geocode from \"react-geocode\";\r\nimport Autocomplete from 'react-google-autocomplete';\r\nGeocode.setApiKey('AIzaSyBiffp6dvrIk_EWQHzXk05VzFKb5tioZeI');\r\nGeocode.enableDebug();\r\n\r\n\r\nexport class Map extends Component {\r\n    state = {\r\n        mapPosition:{\r\n            lat: this.props.center.lat,\r\n            lng: this.props.center.lng\r\n        },\r\n        markerPosition:{\r\n            lat:this.props.center.lat,\r\n            lng:this.props.center.lng\r\n        },\r\n    }\r\n    shouldComponentUpdate( nextProps, nextState ){\r\n        if (\r\n        this.state.markerPosition.lat !== this.props.center.lat \r\n        ) {\r\n        return true\r\n        } else if ( this.props.center.lat === nextProps.center.lat ){\r\n        return false\r\n        }\r\n     }\r\n    onPlaceSelected = ( place ) => {\r\n        console.log(place)\r\n        const address = place.formatted_address,\r\n        latValue = place.geometry.location.lat(),\r\n        lngValue = place.geometry.location.lng();\r\n        // Set these values in the state.\r\n        this.setState({\r\n        markerPosition: {\r\n        lat: latValue,\r\n        lng: lngValue\r\n        },\r\n        mapPosition: {\r\n        lat: latValue,\r\n        lng: lngValue\r\n        },\r\n        })\r\n    };\r\n\r\n    render() {\r\n    const AsyncMap = withScriptjs(\r\n        withGoogleMap(\r\n            props => (\r\n                <GoogleMap google={this.props.google}\r\n                defaultZoom={this.props.zoom}\r\n                defaultCenter={{ lat: this.state.mapPosition.lat, lng: this.state.mapPosition.lng }}\r\n                >\r\n                    <Marker google={this.props.google}\r\n                        name={'Dolores park'}\r\n                        draggable={true}\r\n                        position={{ lat: this.state.markerPosition.lat, lng: this.state.markerPosition.lng }}\r\n                    />\r\n                    <Marker />\r\n                    <Autocomplete\r\n                        style={{\r\n                        width: '100%',\r\n                        height: '40px',\r\n                        paddingLeft: '16px',\r\n                        marginTop: '2px',\r\n                        marginBottom: '100px'\r\n                        }}\r\n                        onPlaceSelected={ this.onPlaceSelected }\r\n                        types={['(regions)']}\r\n                    />\r\n                </GoogleMap>\r\n            )\r\n        )\r\n    )\r\n\r\n    \r\n\r\n    return (\r\n         <div style={{width:\"500px\"}}>\r\n\r\n            <AsyncMap\r\n                googleMapURL=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyBiffp6dvrIk_EWQHzXk05VzFKb5tioZeI&libraries=places\"\r\n                loadingElement={\r\n                 <div style={{ height: `100%` }} />\r\n                }\r\n                containerElement={\r\n                 <div style={{ height: this.props.height }} />\r\n                }\r\n                mapElement={\r\n                 <div style={{ height: `100%` }} />\r\n                }\r\n            />\r\n        </div>\r\n     \r\n    )\r\n  }\r\n}\r\n\r\nexport default Map"]},"metadata":{},"sourceType":"module"}