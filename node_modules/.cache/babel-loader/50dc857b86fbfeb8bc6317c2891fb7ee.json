{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\AlankHoang\\\\Desktop\\\\freecodeacademy\\\\shoppingBasket\\\\client\\\\src\\\\components\\\\AddShop\\\\MapAddShop.js\";\nimport React, { Component } from 'react';\nimport { withGoogleMap, GoogleMap, withScriptjs, Marker, InfoWindow } from \"react-google-maps\";\nimport Geocode from \"react-geocode\";\nimport Autocomplete from 'react-google-autocomplete';\nimport uuid from \"uuid\";\nimport { connect } from \"react-redux\";\nimport { getSuperMarkets } from \"../../actions/SuperMarketActions\";\nimport MarkerShop from \"../SearchShop/MarkerShop\";\nimport PropTypes from \"prop-types\";\nGeocode.setApiKey('AIzaSyBiffp6dvrIk_EWQHzXk05VzFKb5tioZeI');\nGeocode.enableDebug();\nexport class MapAddShop extends Component {\n  constructor(props) {\n    super(props);\n\n    this.updating_marker = () => {\n      console.log(\"updating marker>\");\n\n      if (this.state.moving === true) {\n        var markers1 = this.insideBound_bound(this.props.superMarket.markers, this.state.bound);\n        this.setState({\n          markers1: markers1,\n          moving: false,\n          input: false,\n          maploading: false\n        });\n      } else {\n        markers1 = this.insideBound(this.props.superMarket.markers, this.state.movePosition);\n        this.setState({\n          markers1: markers1,\n          moving: false,\n          input: false,\n          maploading: false\n        });\n      }\n    };\n\n    this.getStreetNumber = addressArray => {\n      let StreetNumber = '';\n\n      for (let i = 0; i < addressArray.length; i++) {\n        if (addressArray[i].types[0] && 'street_number' === addressArray[i].types[0]) {\n          StreetNumber = addressArray[i].long_name;\n          return StreetNumber;\n        }\n      }\n    };\n\n    this.getStreet = addressArray => {\n      let Street = '';\n\n      for (let i = 0; i < addressArray.length; i++) {\n        if (addressArray[i].types[0] && 'route' === addressArray[i].types[0]) {\n          Street = addressArray[i].long_name;\n          return Street;\n        }\n      }\n    };\n\n    this.getPostcode = addressArray => {\n      let postcode = '';\n\n      for (let i = 0; i < addressArray.length; i++) {\n        if (addressArray[i].types[0] && 'postal_code' === addressArray[i].types[0]) {\n          postcode = addressArray[i].long_name;\n          return postcode;\n        }\n      }\n    };\n\n    this.getCity = addressArray => {\n      let city = '';\n\n      for (let i = 0; i < addressArray.length; i++) {\n        if (addressArray[i].types[0]) {\n          for (let j = 0; j < addressArray[i].types.length; j++) {\n            if ('sublocality_level_1' === addressArray[i].types[j] || 'locality' === addressArray[i].types[j]) {\n              city = addressArray[i].long_name;\n              return city;\n            }\n          }\n        }\n      }\n    };\n\n    this.getState = addressArray => {\n      let state = '';\n\n      for (let i = 0; i < addressArray.length; i++) {\n        for (let i = 0; i < addressArray.length; i++) {\n          if (addressArray[i].types[0] && 'administrative_area_level_1' === addressArray[i].types[0]) {\n            state = addressArray[i].short_name;\n            return state;\n          }\n        }\n      }\n    };\n\n    this.onMarkerDragEnd = event => {\n      console.log('event', event);\n      let newLat = event.latLng.lat(),\n          newLng = event.latLng.lng(),\n          addressArray = [];\n      Geocode.fromLatLng(newLat, newLng).then(response => {\n        const completeAddress = response.results[0].formatted_address,\n              addressArray = response.results[0].address_components,\n              street_number = this.getStreetNumber(addressArray),\n              street = this.getStreet(addressArray),\n              city = this.getCity(addressArray),\n              postcode = this.getPostcode(addressArray),\n              state = this.getState(addressArray),\n              address = street_number + \" \" + street;\n        this.props.markerInfoMap({\n          completeAddress: completeAddress ? completeAddress : '',\n          address: address ? address : '',\n          postcode: postcode ? postcode : '',\n          city: city ? city : '',\n          state: state ? state : '',\n          markerPosition: {\n            lat: newLat,\n            lng: newLng\n          },\n          mapPosition: {\n            lat: newLat,\n            lng: newLng\n          }\n        });\n        this.setState({\n          markerPosition: {\n            lat: newLat,\n            lng: newLng\n          }\n        });\n      }, error => {\n        console.error(error);\n      });\n    };\n\n    this.check_markers1 = (array1, array2) => {\n      var arr1 = [];\n      var arr2 = [];\n      array1.map(elem => {\n        arr1.push(elem.id);\n      });\n      array2.map(elem => {\n        arr2.push(elem.id);\n      });\n\n      if (arr1.sort().toString() == arr2.sort().toString()) {\n        return true;\n      } else {\n        return false;\n      }\n    };\n\n    this.onPlaceSelected = (place, event) => {\n      console.log(place);\n\n      if (place.name !== undefined) {\n        Geocode.fromAddress(place.name).then(response => {\n          const _response$results$0$g = response.results[0].geometry.location,\n                lat = _response$results$0$g.lat,\n                lng = _response$results$0$g.lng;\n          console.log(lat, lng);\n          var markers1 = this.insideBound(this.props.superMarket.markers, response.results[0].geometry.location);\n\n          if (lat === undefined) {\n            return null;\n          }\n\n          this.setState({\n            mapPosition: {\n              lat: lat,\n              lng: lng\n            },\n            markerPosition: {\n              lat: lat,\n              lng: lng\n            },\n            movePosition: {\n              lat: lat,\n              lng: lng\n            },\n            zoom: 11,\n            markers1: markers1,\n            input: true,\n            moving: false\n          });\n        });\n      } else {\n        const name = place.formatted_name,\n              latValue = place.geometry.location.lat(),\n              lngValue = place.geometry.location.lng();\n        var markers1 = this.insideBound(this.props.superMarket.markers, place.geometry.location); // Set these values in the state.\n\n        this.setState({\n          mapPosition: {\n            lat: latValue,\n            lng: lngValue\n          },\n          markerPosition: {\n            lat: latValue,\n            lng: lngValue\n          },\n          movePosition: {\n            lat: latValue,\n            lng: lngValue\n          },\n          zoom: 11,\n          markers1: markers1,\n          input: true,\n          moving: false\n        });\n      }\n\n      this.props.markerSelected(\"\");\n      return;\n    };\n\n    this.mapmoved = () => {\n      console.log(\"mapMoved:\" + JSON.stringify(this.state.map.getBounds()));\n      var markers1 = this.insideBound_bound(this.props.superMarket.markers, this.state.map.getBounds());\n      this.setState({\n        bound: this.state.map.getBounds(),\n        movePosition: {\n          lat: this.state.map.getCenter().lat(),\n          lng: this.state.map.getCenter().lng()\n        },\n        mapPosition: {\n          lat: this.state.map.getCenter().lat(),\n          lng: this.state.map.getCenter().lng()\n        },\n        markers1: markers1,\n        moving: true\n      });\n    };\n\n    this.maploaded = mapRef => {\n      console.log(\"maploaded\");\n\n      if (!mapRef) {\n        return;\n      }\n\n      this.setState({\n        map: mapRef,\n        maploading: true\n      });\n    };\n\n    this.onZoom = () => {\n      console.log(\"zoom:\" + this.state.map.getCenter(), this.state.map.getZoom());\n      var markers1 = this.insideBound_bound(this.props.superMarket.markers, this.state.map.getBounds());\n      this.setState({\n        bound: this.state.map.getBounds(),\n        movePosition: {\n          lat: this.state.map.getCenter().lat(),\n          lng: this.state.map.getCenter().lng()\n        },\n        mapPosition: {\n          lat: this.state.map.getCenter().lat(),\n          lng: this.state.map.getCenter().lng()\n        },\n        markers1: markers1,\n        zoom: this.state.map.getZoom(),\n        moving: true\n      });\n    };\n\n    this.insideBound = (shops, center) => {\n      if (center != null && shops != null) {\n        var result = [];\n        shops.map(shop => {\n          if (shop.lat > center.lat - 0.3 && shop.lat < center.lat + 0.3 && shop.lng > center.lng - 0.3 && shop.lng < center.lng + 0.3) {\n            result.push(shop);\n          }\n        });\n        console.log(result, \"lets look center\", center, shops);\n        this.props.markersInBound(result);\n        return result;\n      } else {\n        return [];\n      }\n    };\n\n    this.insideBound_bound = (shops, bound) => {\n      if (bound != null && shops != null) {\n        var result = [];\n        shops.map(shop => {\n          if (shop.lat > bound.na.j && shop.lat < bound.na.l && shop.lng > bound.ia.j && shop.lng < bound.ia.l) {\n            result.push(shop);\n          }\n        });\n        console.log(result, \"lets look bound\", bound, shops);\n        this.props.markersInBound(result);\n        return result;\n      } else {\n        return [];\n      }\n    };\n\n    this.markerSelected = markerObject => {\n      this.props.markerSelected(markerObject);\n    };\n\n    this.state = {\n      completeAddress: \"\",\n      address: '',\n      city: '',\n      postcode: '',\n      state: '',\n      bound: null,\n      input: \"\",\n      mapPosition: {\n        lat: this.props.center.lat,\n        lng: this.props.center.lng\n      },\n      markerPosition: {\n        lat: this.props.center.lat,\n        lng: this.props.center.lng\n      },\n      movePosition: {\n        lat: this.props.center.lat,\n        lng: this.props.center.lng\n      },\n      map: null,\n      markers1: [],\n      zoom: 10,\n      moving: false,\n      maploading: false\n    };\n  }\n\n  componentDidMount() {\n    console.log(\"componentDidMount\");\n    this.props.getSuperMarkets();\n    this.updating_marker();\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    console.log(this.insideBound([{\n      lat: this.state.markerPosition.lat,\n      lng: this.state.markerPosition.lng\n    }], this.state.mapPosition).length === 0);\n    console.log(\"should Componeent update\", nextState, this.state, nextProps, this.props);\n\n    if (this.check_markers1(nextState.markers1, this.state.markers1) === false) {\n      console.log(\"change\");\n      return true;\n    } else if (nextState.input === true) {\n      console.log(\"change position\");\n      return true;\n    } else if (nextProps.shopSelected !== this.props.shopSelected) {\n      console.log(\"new marker selected\");\n      return true;\n    } else if (nextProps.superMarket !== this.props.superMarket) {\n      console.log(\"new shops\");\n      return true;\n    } else if (this.check_markers1(nextState.markers1, this.state.markers1) === true) {\n      console.log(\"no change\");\n      return false;\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    console.log(\"componentDidUpdate\", prevState, this.state, prevProps, this.props, snapshot);\n\n    if (this.props.shopSelected !== prevProps.shopSelected) {\n      return null;\n    } else if (prevProps.superMarket !== this.props.superMarket) {\n      console.log(\"go to new marker coord\");\n      this.setState({\n        mapPosition: {\n          lat: this.props.center.lat,\n          lng: this.props.center.lng\n        },\n        movePosition: {\n          lat: this.props.center.lat,\n          lng: this.props.center.lng\n        }\n      });\n      this.updating_marker();\n    } else {\n      this.updating_marker();\n      this.props.markers(this.props.superMarket);\n    }\n  }\n\n  render() {\n    console.log(this.state, \"rendering state\");\n    console.log(this.props, \"rendering props\");\n    const AsyncMap = withScriptjs(withGoogleMap(props => React.createElement(GoogleMap, {\n      ref: this.maploaded,\n      zoom: this.state.zoom,\n      defaultCenter: {\n        lat: this.props.center.lat,\n        lng: this.props.center.lng\n      },\n      center: {\n        lat: this.state.mapPosition.lat,\n        lng: this.state.mapPosition.lng\n      },\n      onDragEnd: this.mapmoved,\n      onZoomChanged: this.onZoom,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 369\n      },\n      __self: this\n    }, React.createElement(Autocomplete, {\n      style: {\n        width: '200%',\n        height: '40px',\n        paddingLeft: '16px',\n        margin: \"2px auto 20px auto\"\n      },\n      onPlaceSelected: this.onPlaceSelected,\n      types: ['(regions)'],\n      placeholder: \"Enter and select location\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 377\n      },\n      __self: this\n    }), React.createElement(Marker, {\n      draggable: true,\n      onDragEnd: this.onMarkerDragEnd,\n      position: {\n        lat: this.state.markerPosition.lat,\n        lng: this.state.markerPosition.lng\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 388\n      },\n      __self: this\n    }), React.createElement(MarkerShop, {\n      markers1: this.state.markers1,\n      markerSelected: this.markerSelected,\n      shopSelected: this.props.shopSelected,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 393\n      },\n      __self: this\n    }))));\n    let map;\n    map = React.createElement(\"div\", {\n      style: {\n        width: \"100%\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 402\n      },\n      __self: this\n    }, React.createElement(AsyncMap, {\n      googleMapURL: \"https://maps.googleapis.com/maps/api/js?key=AIzaSyBiffp6dvrIk_EWQHzXk05VzFKb5tioZeI&libraries=places\",\n      loadingElement: React.createElement(\"div\", {\n        style: {\n          height: \"100%\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 406\n        },\n        __self: this\n      }),\n      containerElement: React.createElement(\"div\", {\n        style: {\n          height: this.props.height,\n          display: \"flex\",\n          flexDirection: \"column-reverse\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 409\n        },\n        __self: this\n      }),\n      mapElement: React.createElement(\"div\", {\n        style: {\n          height: \"100%\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 414\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 403\n      },\n      __self: this\n    }));\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 420\n      },\n      __self: this\n    }, map);\n  }\n\n}\nMapAddShop.propTypes = {\n  getSuperMarkets: PropTypes.func.isRequired,\n  superMarket: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  superMarket: state.superMarket\n});\n\nexport default connect(mapStateToProps, {\n  getSuperMarkets\n})(MapAddShop);","map":{"version":3,"sources":["C:\\Users\\AlankHoang\\Desktop\\freecodeacademy\\shoppingBasket\\client\\src\\components\\AddShop\\MapAddShop.js"],"names":["React","Component","withGoogleMap","GoogleMap","withScriptjs","Marker","InfoWindow","Geocode","Autocomplete","uuid","connect","getSuperMarkets","MarkerShop","PropTypes","setApiKey","enableDebug","MapAddShop","constructor","props","updating_marker","console","log","state","moving","markers1","insideBound_bound","superMarket","markers","bound","setState","input","maploading","insideBound","movePosition","getStreetNumber","addressArray","StreetNumber","i","length","types","long_name","getStreet","Street","getPostcode","postcode","getCity","city","j","getState","short_name","onMarkerDragEnd","event","newLat","latLng","lat","newLng","lng","fromLatLng","then","response","completeAddress","results","formatted_address","address_components","street_number","street","address","markerInfoMap","markerPosition","mapPosition","error","check_markers1","array1","array2","arr1","arr2","map","elem","push","id","sort","toString","onPlaceSelected","place","name","undefined","fromAddress","geometry","location","zoom","formatted_name","latValue","lngValue","markerSelected","mapmoved","JSON","stringify","getBounds","getCenter","maploaded","mapRef","onZoom","getZoom","shops","center","result","shop","markersInBound","na","l","ia","markerObject","componentDidMount","shouldComponentUpdate","nextProps","nextState","shopSelected","componentDidUpdate","prevProps","prevState","snapshot","render","AsyncMap","width","height","paddingLeft","margin","display","flexDirection","propTypes","func","isRequired","object","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { withGoogleMap, GoogleMap, withScriptjs, Marker,InfoWindow  } from \"react-google-maps\";\r\nimport Geocode from \"react-geocode\"\r\nimport Autocomplete from 'react-google-autocomplete';\r\nimport uuid from \"uuid\"\r\nimport {connect} from \"react-redux\"\r\nimport {getSuperMarkets} from \"../../actions/SuperMarketActions\"\r\nimport MarkerShop from \"../SearchShop/MarkerShop\"\r\nimport PropTypes from \"prop-types\"\r\n\r\nGeocode.setApiKey('AIzaSyBiffp6dvrIk_EWQHzXk05VzFKb5tioZeI');\r\nGeocode.enableDebug();\r\n\r\n\r\nexport class MapAddShop extends Component {\r\n\tconstructor(props){\r\n\t\tsuper(props)\r\n\t\tthis.state = {\r\n\t\t\tcompleteAddress :\"\",\r\n            address: '',\r\n            city: '',\r\n            postcode: '',\r\n            state: '',\r\n\t\t\tbound:null,\r\n\t\t\tinput:\"\",\r\n\t\t\tmapPosition:{\r\n\t\t\t\tlat: this.props.center.lat,\r\n\t\t\t\tlng: this.props.center.lng\r\n\t\t\t},\r\n\t\t\tmarkerPosition:{\r\n\t\t\t\tlat:this.props.center.lat,\r\n\t\t\t\tlng:this.props.center.lng\r\n\t\t\t},\r\n\t\t\tmovePosition:{\r\n\t\t\t\tlat:this.props.center.lat,\r\n\t\t\t\tlng:this.props.center.lng\t\t\r\n\t\t\t},\r\n\t\t\tmap:null,\r\n\t\t\tmarkers1:[],\r\n\t\t\tzoom:10,\r\n\t\t\tmoving:false,\r\n\t\t\tmaploading:false,\r\n\t\t}\r\n\t}\r\n\tcomponentDidMount(){\r\n\t\tconsole.log(\"componentDidMount\")\r\n\t\tthis.props.getSuperMarkets()\r\n\t\tthis.updating_marker()\r\n\r\n\t}\r\n\tupdating_marker = ()=>{\r\n\t\tconsole.log(\"updating marker>\")\r\n\t\tif (this.state.moving===true){\r\n\t\t\tvar markers1 = this.insideBound_bound(this.props.superMarket.markers,this.state.bound)\r\n\t\t\tthis.setState({\r\n\t\t\t\tmarkers1:markers1,\r\n\t\t\t\tmoving:false,\r\n\t\t\t\tinput:false,\r\n\t\t\t\tmaploading:false,\r\n\t\t\t})\r\n\t\t}else{\r\n\t\t\tmarkers1 = this.insideBound(this.props.superMarket.markers,this.state.movePosition)\r\n\t\t\tthis.setState({\r\n\t\t\t\tmarkers1:markers1,\r\n\t\t\t\tmoving:false,\r\n\t\t\t\tinput:false,\r\n\t\t\t\tmaploading:false,\r\n\t\t\t})\t\t\r\n\t\t}\r\n\t}\r\n\tshouldComponentUpdate( nextProps, nextState ){\t\r\n\t\tconsole.log(this.insideBound([{lat:this.state.markerPosition.lat,lng:this.state.markerPosition.lng}],this.state.mapPosition).length===0)\r\n\t\tconsole.log(\"should Componeent update\", nextState, this.state,nextProps,this.props)\r\n\t\tif (this.check_markers1(nextState.markers1,this.state.markers1)===false){\r\n\t\t\tconsole.log(\"change\")\r\n\t\t\treturn true\r\n\t\t}\t\t\r\n\t\telse if(nextState.input===true){\r\n\t\t\tconsole.log(\"change position\")\r\n\t\t\treturn true\r\n\t\t}\r\n\t\telse if(nextProps.shopSelected !== this.props.shopSelected){\r\n\t\t\tconsole.log(\"new marker selected\")\r\n\t\t\treturn true\r\n\t\t}\r\n\t\telse if(nextProps.superMarket!==this.props.superMarket){\r\n\t\t\tconsole.log(\"new shops\")\r\n\t\t\treturn true\r\n\t\t}\r\n\t\telse if (this.check_markers1(nextState.markers1,this.state.markers1)===true){\r\n\t\t\tconsole.log(\"no change\")\r\n\t\t\treturn false\r\n\t\t}\r\n\t}\r\n\tcomponentDidUpdate(prevProps, prevState, snapshot){\r\n\t\tconsole.log(\"componentDidUpdate\",prevState,this.state,prevProps,this.props,snapshot)\r\n\t\tif(this.props.shopSelected!==prevProps.shopSelected){\r\n\t\t\treturn null\r\n\t\t}else if(prevProps.superMarket!==this.props.superMarket){\r\n\t\t\tconsole.log(\"go to new marker coord\")\r\n\t\t\tthis.setState({\r\n\t\t\t\tmapPosition\t:{\r\n\t\t\t\t\tlat: this.props.center.lat,\r\n\t\t\t\t\tlng: this.props.center.lng\r\n\t\t\t\t},\r\n\t\t\t\tmovePosition\t:{\r\n\t\t\t\t\tlat: this.props.center.lat,\r\n\t\t\t\t\tlng: this.props.center.lng\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\tthis.updating_marker()\r\n\t\t}\r\n\t\telse{\r\n\t\t\tthis.updating_marker()\r\n\t\t\tthis.props.markers(this.props.superMarket)\r\n\t\t}\r\n\r\n\t}\r\n\tgetStreetNumber = ( addressArray ) => {\r\n        let StreetNumber = '';\r\n        for( let i = 0; i < addressArray.length; i++ ) {\r\n            if ( addressArray[ i ].types[0] && 'street_number' === addressArray[ i ].types[0] ) {\r\n                StreetNumber = addressArray[ i ].long_name;\r\n                return StreetNumber;\r\n            }\r\n        }\r\n    }\r\n\r\n    getStreet = ( addressArray ) => {\r\n        let Street = '';\r\n        for( let i = 0; i < addressArray.length; i++ ) {\r\n            if ( addressArray[ i ].types[0] && 'route' === addressArray[ i ].types[0] ) {\r\n                Street = addressArray[ i ].long_name;\r\n                return Street;\r\n            }\r\n        }\r\n    }\r\n\r\n    getPostcode = ( addressArray ) => {\r\n        let postcode = '';\r\n        for( let i = 0; i < addressArray.length; i++ ) {\r\n            if ( addressArray[ i ].types[0] && 'postal_code' === addressArray[ i ].types[0] ) {\r\n                postcode = addressArray[ i ].long_name;\r\n                return postcode;\r\n            }\r\n        }\r\n    };\r\n\r\n    getCity = ( addressArray ) => {\r\n        let city = '';\r\n        for( let i = 0; i < addressArray.length; i++ ) {\r\n            if ( addressArray[ i ].types[0]  ) {\r\n            for ( let j = 0; j < addressArray[ i ].types.length; j++ ) {\r\n                if ( 'sublocality_level_1' === addressArray[ i ].types[j] || 'locality' === addressArray[ i ].types[j] ) {\r\n                    city = addressArray[ i ].long_name;\r\n                    return city;\r\n                }\r\n            }\r\n        }\r\n        }\r\n    };\r\n\r\n    getState = ( addressArray ) => {\r\n    let state = '';\r\n        for( let i = 0; i < addressArray.length; i++ ) {\r\n            for( let i = 0; i < addressArray.length; i++ ) {\r\n                if ( addressArray[ i ].types[0] && 'administrative_area_level_1' === addressArray[ i ].types[0] ) {\r\n                    state = addressArray[ i ].short_name;\r\n                    return state;\r\n                }\r\n            }\r\n        }\r\n    };\r\n    onMarkerDragEnd = ( event ) => {\r\n        console.log( 'event', event );\r\n        let newLat = event.latLng.lat(),\r\n        newLng = event.latLng.lng(),\r\n        addressArray = [];\r\n        Geocode.fromLatLng( newLat , newLng ).then(\r\n        response => {\r\n            const completeAddress = response.results[0].formatted_address,\r\n            addressArray =  response.results[0].address_components,\r\n            street_number =this.getStreetNumber(addressArray),\r\n            street =this.getStreet(addressArray),\r\n            city = this.getCity( addressArray ),\r\n            postcode = this.getPostcode( addressArray ),\r\n            state = this.getState( addressArray ),\r\n            address = street_number +\" \"+street\r\n            this.props.markerInfoMap({\r\n                completeAddress: ( completeAddress ) ? completeAddress : '',\r\n                address: ( address ) ? address : '',\r\n                postcode: ( postcode ) ? postcode : '',\r\n                city: ( city ) ? city : '',\r\n                state: ( state ) ? state : '',\r\n                markerPosition: {\r\n                lat: newLat,\r\n                lng: newLng\r\n                },\r\n                mapPosition: {\r\n                lat: newLat,\r\n                lng: newLng\r\n                },\r\n                } )\r\n            this.setState({\r\n                markerPosition: {\r\n                lat: newLat,\r\n                lng: newLng\r\n                },\r\n            })\r\n        },\r\n\r\n        error => {\r\n            console.error(error);\r\n        }\r\n    );\r\n    };\r\n\tcheck_markers1=(array1,array2) => {\r\n\t\tvar arr1 = []\r\n\t\tvar arr2 = []\r\n\t\tarray1.map((elem)=>{\r\n\t\t\tarr1.push(elem.id\t)\r\n\t\t})\r\n\t\tarray2.map((elem)=>{\r\n\t\t\tarr2.push(elem.id\t)\r\n\t\t})\r\n\t\tif (arr1.sort().toString()==arr2.sort().toString()){\t\r\n\t\t\treturn true\r\n\t\t}else \r\n\t\t\t{return false}\r\n\t\t}\r\n\tonPlaceSelected = ( place,event ) => {\r\n\t\tconsole.log(place)\r\n\t\tif (place.name!==undefined){\r\n\t\t\tGeocode.fromAddress(place.name).then(\r\n\t\t\t\tresponse => {\r\n    \t\t\tconst { lat, lng } = response.results[0].geometry.location\r\n    \t\t\tconsole.log(lat, lng)\r\n    \t\t\tvar markers1 = this.insideBound(this.props.superMarket.markers,response.results[0].geometry.location)\r\n    \t\t\tif (lat ===undefined){\r\n    \t\t\t\treturn null\r\n    \t\t\t}\r\n    \t\t\tthis.setState({\r\n\t\t\t\t\tmapPosition: {\r\n\t\t\t\t\t\tlat: lat,\r\n\t\t\t\t\t\tlng: lng\r\n\t\t\t\t\t},\r\n\t\t\t\t\tmarkerPosition: {\r\n\t\t\t\t\t\tlat: lat,\r\n\t\t\t\t\t\tlng: lng\r\n\t\t\t\t\t},\r\n\t\t\t\t\tmovePosition: {\r\n\t\t\t\t\t\tlat: lat,\r\n\t\t\t\t\t\tlng: lng\r\n\t\t\t\t},\r\n\t\t\t\t\tzoom:11,\r\n\t\t\t\t\tmarkers1:markers1,\r\n\t\t\t\t\tinput:true,\r\n\t\t\t\t\tmoving:false,\r\n\t\t\t})\r\n    \t\t})\r\n\t\t}\r\n\t\telse{\r\n\t\t\tconst name = place.formatted_name,\r\n\t\t\tlatValue = place.geometry.location.lat(),\r\n\t\t\tlngValue = place.geometry.location.lng();\r\n\t\t\tvar markers1 = this.insideBound(this.props.superMarket.markers,place.geometry.location)\r\n\t\t\t// Set these values in the state.\r\n\t\t\tthis.setState({\r\n\t\t\t\tmapPosition: {\r\n\t\t\t\t\tlat: latValue,\r\n\t\t\t\t\tlng: lngValue\r\n\t\t\t\t},\r\n\t\t\t\tmarkerPosition: {\r\n\t\t\t\t\tlat: latValue,\r\n\t\t\t\t\tlng: lngValue\r\n\t\t\t\t},\r\n\t\t\t\tmovePosition: {\r\n\t\t\t\t\tlat: latValue,\r\n\t\t\t\t\tlng: lngValue\r\n\t\t\t\t},\r\n\t\t\t\tzoom:11,\r\n\t\t\t\tmarkers1:markers1,\r\n\t\t\t\tinput:true,\r\n\t\t\t\tmoving:false,\r\n\t\t\t})\r\n\t\t}\r\n\tthis.props.markerSelected(\"\")\r\n\treturn\r\n\t};\r\n\tmapmoved=()=>{\r\n\t\tconsole.log(\"mapMoved:\"+JSON.stringify(this.state.map.getBounds()))\r\n\t\tvar markers1 = this.insideBound_bound(this.props.superMarket.markers,this.state.map.getBounds())\r\n\t\tthis.setState({\r\n\t\t\tbound:this.state.map.getBounds(),\r\n\t\t\tmovePosition: {\r\n\t\t\t\tlat: this.state.map.getCenter().lat(),\r\n\t\t\t\tlng: this.state.map.getCenter().lng()\r\n\t\t\t},\r\n\t\t\tmapPosition: {\r\n\t\t\t\tlat: this.state.map.getCenter().lat(),\r\n\t\t\t\tlng: this.state.map.getCenter().lng()\r\n\t\t\t},\r\n\t\t\tmarkers1:markers1 ,\r\n\t\t\tmoving:true\t\r\n\t\t})\r\n\t}\r\n\tmaploaded=(mapRef)=>{\r\n\t\tconsole.log(\"maploaded\")\r\n\t\tif(!mapRef){\r\n\t\t\treturn\r\n\t\t}\r\n\t\tthis.setState({\r\n\t\t\tmap:mapRef,\r\n\t\t\tmaploading:true})\t\r\n\t}\r\n\tonZoom = ()=>{\r\n\t\tconsole.log(\"zoom:\"+this.state.map.getCenter(),this.state.map.getZoom())\r\n\t\tvar markers1 = this.insideBound_bound(this.props.superMarket.markers,this.state.map.getBounds())\r\n\t\tthis.setState({\r\n\t\t\tbound:this.state.map.getBounds(),\r\n\t\t\tmovePosition: {\r\n\t\t\t\tlat: this.state.map.getCenter().lat(),\r\n\t\t\t\tlng: this.state.map.getCenter().lng()\r\n\t\t\t},\r\n\t\t\tmapPosition: {\r\n\t\t\t\tlat: this.state.map.getCenter().lat(),\r\n\t\t\t\tlng: this.state.map.getCenter().lng()\r\n\t\t\t},\r\n\t\t\tmarkers1:markers1,\r\n\t\t\tzoom:this.state.map.getZoom(),\r\n\t\t\tmoving:true\t\r\n\t\t})\r\n\t}\r\n\tinsideBound = (shops,center)=>{\r\n\t\tif (center!=null&&shops!=null){\r\n\t\t\tvar result = []\r\n\t\t\tshops.map((shop)=>{\r\n\t\t\t\tif (shop.lat>center.lat-0.3 && shop.lat<center.lat+0.3 && shop.lng>center.lng-0.3 && shop.lng<center.lng+0.3){\r\n\t\t\t\t\tresult.push(shop)}\t\r\n\t\t\t})\r\n\t\t\tconsole.log(result,\"lets look center\",center,shops)\t\r\n\t\t\tthis.props.markersInBound(result)\t\t\r\n\t\t\treturn result\t\t\t\r\n\t\t}else{return []}\t\t\r\n\t}\r\n\tinsideBound_bound = (shops,bound)=>{\r\n\t\tif (bound!=null&&shops!=null){\r\n\t\t\tvar result = []\t\r\n\t\t\tshops.map((shop)=>{\r\n\t\t\t\tif (shop.lat>bound.na.j && shop.lat<bound.na.l && shop.lng>bound.ia.j && shop.lng<bound.ia.l){\r\n\t\t\t\t\tresult.push(shop)}\t\r\n\t\t\t})\r\n\t\t\tconsole.log(result,\"lets look bound\",bound,shops)\t\t\r\n\t\t\tthis.props.markersInBound(result)\t\t\r\n\t\t\treturn result\t\t\t\r\n\t\t}else{return []}\r\n\t}\r\n\tmarkerSelected =(markerObject)=>{\r\n\t\tthis.props.markerSelected(markerObject)\r\n\t}\r\n\t\r\n\trender() {\r\n\tconsole.log(this.state,\"rendering state\")\r\n\tconsole.log(this.props,\"rendering props\")\r\n\t\r\n\tconst AsyncMap = withScriptjs(\r\n\t\twithGoogleMap(\r\n\t\t\tprops => (\r\n\t\t\t\t<GoogleMap \r\n\t\t\t\tref = {this.maploaded}\r\n\t\t\t\tzoom={this.state.zoom}\r\n\t\t\t\tdefaultCenter={{ lat: this.props.center.lat, lng: this.props.center.lng}}\r\n\t\t\t\tcenter={{ lat: this.state.mapPosition.lat, lng: this.state.mapPosition.lng }}\r\n\t\t\t\tonDragEnd={this.mapmoved}\r\n\t\t\t\tonZoomChanged = {this.onZoom}\r\n\t\t\t\t>\r\n\t\t\t\t\t<Autocomplete\r\n\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\twidth: '200%',\r\n\t\t\t\t\t\theight: '40px',\r\n\t\t\t\t\t\tpaddingLeft: '16px',\r\n\t\t\t\t\t\tmargin:\"2px auto 20px auto\",\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t\tonPlaceSelected={ this.onPlaceSelected }\r\n\t\t\t\t\t\ttypes={['(regions)']}\r\n\t\t\t\t\t\tplaceholder={\"Enter and select location\"}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<Marker \r\n\t\t\t\t\t\tdraggable={true}\r\n\t\t\t\t\t\tonDragEnd = {this.onMarkerDragEnd}\r\n\t\t\t\t\t\tposition={{ lat: this.state.markerPosition.lat, lng: this.state.markerPosition.lng }}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<MarkerShop\r\n\t\t\t\t\t\tmarkers1={this.state.markers1}\r\n\t\t\t\t\t\tmarkerSelected = {this.markerSelected}\r\n\t\t\t\t\t\tshopSelected = {this.props.shopSelected}/>\r\n\t\t\t\t</GoogleMap>\r\n\t\t\t)\r\n\t\t)\r\n\t)\r\n\tlet map\r\n\tmap =  <div style={{width:\"100%\"}} >\r\n\t\t\t<AsyncMap\r\n\t\t\t\tgoogleMapURL= \"https://maps.googleapis.com/maps/api/js?key=AIzaSyBiffp6dvrIk_EWQHzXk05VzFKb5tioZeI&libraries=places\"\r\n\t\t\t\tloadingElement={\r\n\t\t\t\t <div style={{ height: `100%` }} />\r\n\t\t\t\t}\r\n\t\t\t\tcontainerElement={\r\n\t\t\t\t <div style={{ height: this.props.height,\r\n  \t\t\t\t\t\t\t\tdisplay: \"flex\",\r\n  \t\t\t\t\t\t\t\tflexDirection: \"column-reverse\"}} />\r\n\t\t\t\t}\r\n\t\t\t\tmapElement={\r\n\t\t\t\t <div style={{ height: `100%` }} />\r\n\t\t\t\t}\r\n\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\treturn (\r\n\t\t<React.Fragment>\r\n\t\t\t{map}\r\n\t\t</React.Fragment> \r\n\t)\r\n  }\r\n}\r\n\r\nMapAddShop.propTypes = {\r\n\tgetSuperMarkets:PropTypes.func.isRequired,\r\n\tsuperMarket:PropTypes.object.isRequired\r\n}\r\n\r\nconst mapStateToProps = (state)=>({\r\n\tsuperMarket:state.superMarket\r\n})\r\n\r\nexport default connect(mapStateToProps,{getSuperMarkets})(MapAddShop)"]},"metadata":{},"sourceType":"module"}