{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Autocomplete = exports.autocompleteFactory = undefined;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nvar _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _reactDom = require('react-dom');\n\nvar _reactDom2 = _interopRequireDefault(_reactDom);\n\nvar _classnames4 = require('classnames');\n\nvar _classnames5 = _interopRequireDefault(_classnames4);\n\nvar _reactCssThemr = require('react-css-themr');\n\nvar _utils = require('../utils/utils');\n\nvar _identifiers = require('../identifiers.js');\n\nvar _Chip = require('../chip/Chip.js');\n\nvar _Chip2 = _interopRequireDefault(_Chip);\n\nvar _Input = require('../input/Input.js');\n\nvar _Input2 = _interopRequireDefault(_Input);\n\nvar _events = require('../utils/events.js');\n\nvar _events2 = _interopRequireDefault(_events);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n/* eslint-disable */\n\n\nvar POSITION = {\n  AUTO: 'auto',\n  DOWN: 'down',\n  UP: 'up'\n};\n\nvar factory = function factory(Chip, Input) {\n  var Autocomplete = function (_Component) {\n    _inherits(Autocomplete, _Component);\n\n    function Autocomplete() {\n      var _ref;\n\n      var _temp, _this, _ret;\n\n      _classCallCheck(this, Autocomplete);\n\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Autocomplete.__proto__ || Object.getPrototypeOf(Autocomplete)).call.apply(_ref, [this].concat(args))), _this), _this.state = {\n        direction: _this.props.direction,\n        focus: false,\n        showAllSuggestions: _this.props.showSuggestionsWhenValueIsSet,\n        query: _this.props.query ? _this.props.query : _this.query(_this.props.value),\n        isValueAnObject: false\n      }, _this.handleChange = function (values, event) {\n        var value = _this.props.multiple ? values : values[0];\n        var showAllSuggestions = _this.props.showSuggestionsWhenValueIsSet;\n\n        var query = _this.query(value);\n\n        if (_this.props.onChange) _this.props.onChange(value, event);\n\n        if (_this.props.keepFocusOnChange) {\n          _this.setState({\n            query: query,\n            showAllSuggestions: showAllSuggestions\n          });\n        } else {\n          _this.setState({\n            focus: false,\n            query: query,\n            showAllSuggestions: showAllSuggestions\n          }, function () {\n            _reactDom2.default.findDOMNode(_this).querySelector('input').blur();\n          });\n        }\n\n        _this.updateQuery(query, _this.props.query);\n      }, _this.handleMouseDown = function (event) {\n        _this.selectOrCreateActiveItem(event);\n      }, _this.handleQueryBlur = function (event) {\n        if (_this.state.focus) _this.setState({\n          focus: false\n        });\n        if (_this.props.onBlur) _this.props.onBlur(event, _this.state.active);\n      }, _this.updateQuery = function (query, notify) {\n        if (notify && _this.props.onQueryChange) _this.props.onQueryChange(query);\n\n        _this.setState({\n          query: query\n        });\n      }, _this.handleQueryChange = function (value) {\n        var query = _this.clearQuery ? '' : value;\n        _this.clearQuery = false;\n\n        _this.updateQuery(query, true);\n\n        _this.setState({\n          showAllSuggestions: query ? false : _this.props.showSuggestionsWhenValueIsSet,\n          active: null\n        });\n      }, _this.handleQueryFocus = function (event) {\n        event.target.scrollTop = 0;\n\n        _this.setState({\n          active: '',\n          focus: true\n        });\n\n        if (_this.props.onFocus) _this.props.onFocus(event);\n      }, _this.handleQueryKeyDown = function (event) {\n        // Mark query for clearing in handleQueryChange when pressing backspace and showing all suggestions.\n        _this.clearQuery = event.which === 8 && _this.props.showSuggestionsWhenValueIsSet && _this.state.showAllSuggestions;\n\n        if (event.which === 13) {\n          _this.selectOrCreateActiveItem(event);\n        }\n\n        if (_this.props.onKeyDown) _this.props.onKeyDown(event);\n      }, _this.handleQueryKeyUp = function (event) {\n        if (event.which === 27) _reactDom2.default.findDOMNode(_this).querySelector('input').blur();\n\n        if ([40, 38].indexOf(event.which) !== -1) {\n          var suggestionsKeys = [].concat(_toConsumableArray(_this.suggestions().keys()));\n          var index = suggestionsKeys.indexOf(_this.state.active) + (event.which === 40 ? +1 : -1);\n          if (index < 0) index = suggestionsKeys.length - 1;\n          if (index >= suggestionsKeys.length) index = 0;\n\n          _this.setState({\n            active: suggestionsKeys[index]\n          });\n        }\n\n        if (_this.props.onKeyUp) _this.props.onKeyUp(event);\n      }, _this.handleSuggestionHover = function (event) {\n        _this.setState({\n          active: event.target.id\n        });\n      }, _this.select = function (event, target) {\n        _events2.default.pauseEvent(event);\n\n        var values = _this.values(_this.props.value);\n\n        var source = _this.source();\n\n        var newValue = target === void 0 ? event.target.id : target;\n\n        if (_this.isValueAnObject()) {\n          var newItem = Array.from(source).reduce(function (obj, _ref2) {\n            var _ref3 = _slicedToArray(_ref2, 2),\n                k = _ref3[0],\n                value = _ref3[1];\n\n            if (k === newValue) {\n              obj[k] = value;\n            }\n\n            return obj;\n          }, {});\n\n          if (Object.keys(newItem).length === 0 && newValue) {\n            newItem[newValue] = newValue;\n          }\n\n          return _this.handleChange(Object.assign(_this.mapToObject(values), newItem), event);\n        }\n\n        _this.handleChange([newValue].concat(_toConsumableArray(values.keys())), event);\n      }, _temp), _possibleConstructorReturn(_this, _ret);\n    }\n\n    _createClass(Autocomplete, [{\n      key: 'componentWillReceiveProps',\n      value: function componentWillReceiveProps(nextProps) {\n        if (!this.props.multiple) {\n          var query = nextProps.query ? nextProps.query : this.query(nextProps.value);\n          this.updateQuery(query, false);\n        }\n      }\n    }, {\n      key: 'shouldComponentUpdate',\n      value: function shouldComponentUpdate(nextProps, nextState) {\n        if (!this.state.focus && nextState.focus && this.props.direction === POSITION.AUTO) {\n          var direction = this.calculateDirection();\n\n          if (this.state.direction !== direction) {\n            this.setState({\n              direction: direction\n            });\n          }\n        }\n\n        return true;\n      }\n    }, {\n      key: 'calculateDirection',\n      value: function calculateDirection() {\n        if (this.props.direction === 'auto') {\n          var client = _reactDom2.default.findDOMNode(this.inputNode).getBoundingClientRect();\n\n          var screen_height = window.innerHeight || document.documentElement.offsetHeight;\n          var up = client.top > screen_height / 2 + client.height;\n          return up ? 'up' : 'down';\n        }\n\n        return this.props.direction;\n      }\n    }, {\n      key: 'query',\n      value: function query(key) {\n        var query_value = '';\n\n        if (!this.props.multiple && (0, _utils.isValuePresent)(key)) {\n          var source_value = this.source().get('' + key);\n          query_value = source_value || key;\n        }\n\n        return query_value;\n      }\n    }, {\n      key: 'selectOrCreateActiveItem',\n      value: function selectOrCreateActiveItem(event) {\n        var target = this.state.active;\n\n        if (!target) {\n          target = this.props.allowCreate ? this.state.query : [].concat(_toConsumableArray(this.suggestions().keys()))[0];\n          this.setState({\n            active: target\n          });\n        }\n\n        this.select(event, target);\n      }\n    }, {\n      key: 'normalise',\n      value: function normalise(value) {\n        var sdiak = 'áâäąáâäąččććççĉĉďđďđééěëēėęéěëēėęĝĝğğġġģģĥĥħħíîíîĩĩīīĭĭįįi̇ıĵĵķķĸĺĺļļŀŀłłĺľĺľňńņŋŋņňńŉóöôőøōōóöőôøřřŕŕŗŗššśśŝŝşşţţťťŧŧũũūūŭŭůůűűúüúüűųųŵŵýyŷŷýyžžźźżżß';\n        var bdiak = 'AAAAAAAACCCCCCCCDDDDEEEEEEEEEEEEEGGGGGGGGHHHHIIIIIIIIIIIIIIJJKKKLLLLLLLLLLLLNNNNNNNNNOOOOOOOOOOOORRRRRRSSSSSSSSTTTTTTUUUUUUUUUUUUUUUUUWWYYYYYYZZZZZZS';\n        var normalised = '';\n\n        for (var p = 0; p < value.length; p++) {\n          if (sdiak.indexOf(value.charAt(p)) !== -1) {\n            normalised += bdiak.charAt(sdiak.indexOf(value.charAt(p)));\n          } else {\n            normalised += value.charAt(p);\n          }\n        }\n\n        return normalised.toLowerCase().trim();\n      }\n    }, {\n      key: 'suggestions',\n      value: function suggestions() {\n        var suggest = new Map();\n        var rawQuery = this.state.query || (this.props.multiple ? '' : this.props.value);\n        var query = this.normalise('' + rawQuery);\n        var values = this.values();\n        var source = this.source(); // Suggest any non-set value which matches the query\n\n        if (this.props.multiple) {\n          var _iteratorNormalCompletion = true;\n          var _didIteratorError = false;\n          var _iteratorError = undefined;\n\n          try {\n            for (var _iterator = source[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n              var _step$value = _slicedToArray(_step.value, 2),\n                  key = _step$value[0],\n                  value = _step$value[1];\n\n              if (!values.has(key) && this.matches(this.normalise(value), query)) {\n                suggest.set(key, value);\n              }\n            } // When multiple is false, suggest any value which matches the query if showAllSuggestions is false\n\n          } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion && _iterator.return) {\n                _iterator.return();\n              }\n            } finally {\n              if (_didIteratorError) {\n                throw _iteratorError;\n              }\n            }\n          }\n        } else if (query && !this.state.showAllSuggestions) {\n          var _iteratorNormalCompletion2 = true;\n          var _didIteratorError2 = false;\n          var _iteratorError2 = undefined;\n\n          try {\n            for (var _iterator2 = source[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n              var _step2$value = _slicedToArray(_step2.value, 2),\n                  key = _step2$value[0],\n                  value = _step2$value[1];\n\n              if (this.matches(this.normalise(value), query)) {\n                suggest.set(key, value);\n              }\n            } // When multiple is false, suggest all values when showAllSuggestions is true\n\n          } catch (err) {\n            _didIteratorError2 = true;\n            _iteratorError2 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion2 && _iterator2.return) {\n                _iterator2.return();\n              }\n            } finally {\n              if (_didIteratorError2) {\n                throw _iteratorError2;\n              }\n            }\n          }\n        } else {\n          suggest = source;\n        }\n\n        return suggest;\n      }\n    }, {\n      key: 'matches',\n      value: function matches(value, query) {\n        var suggestionMatch = this.props.suggestionMatch;\n\n        if (suggestionMatch === 'disabled') {\n          return true;\n        } else if (suggestionMatch === 'start') {\n          return value.startsWith(query);\n        } else if (suggestionMatch === 'anywhere') {\n          return value.includes(query);\n        } else if (suggestionMatch === 'word') {\n          var re = new RegExp('\\\\b' + query, 'g');\n          return re.test(value);\n        } else if (suggestionMatch === 'none') {\n          return value;\n        }\n\n        return false;\n      }\n    }, {\n      key: 'source',\n      value: function source() {\n        var src = this.props.source;\n\n        if (src.hasOwnProperty('length')) {\n          return new Map(src.map(function (item) {\n            return Array.isArray(item) ? [].concat(_toConsumableArray(item)) : [item, item];\n          }));\n        }\n\n        return new Map(Object.keys(src).map(function (key) {\n          return ['' + key, src[key]];\n        }));\n      }\n    }, {\n      key: 'values',\n      value: function values() {\n        var vals = this.props.multiple ? this.props.value : [this.props.value];\n        if (!vals) vals = [];\n\n        if (this.props.showSelectedWhenNotInSource && this.isValueAnObject()) {\n          return new Map(Object.entries(vals));\n        }\n\n        var valueMap = new Map();\n        var stringVals = vals.map(function (v) {\n          return '' + v;\n        });\n        var _iteratorNormalCompletion3 = true;\n        var _didIteratorError3 = false;\n        var _iteratorError3 = undefined;\n\n        try {\n          for (var _iterator3 = this.source()[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n            var _step3$value = _slicedToArray(_step3.value, 2),\n                k = _step3$value[0],\n                v = _step3$value[1];\n\n            if (stringVals.indexOf(k) !== -1) valueMap.set(k, v);\n          }\n        } catch (err) {\n          _didIteratorError3 = true;\n          _iteratorError3 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion3 && _iterator3.return) {\n              _iterator3.return();\n            }\n          } finally {\n            if (_didIteratorError3) {\n              throw _iteratorError3;\n            }\n          }\n        }\n\n        return valueMap;\n      }\n    }, {\n      key: 'unselect',\n      value: function unselect(key, event) {\n        if (!this.props.disabled) {\n          var values = this.values(this.props.value);\n          values.delete(key);\n\n          if (this.isValueAnObject()) {\n            return this.handleChange(this.mapToObject(values), event);\n          }\n\n          this.handleChange([].concat(_toConsumableArray(values.keys())), event);\n        }\n      }\n    }, {\n      key: 'isValueAnObject',\n      value: function isValueAnObject() {\n        return !Array.isArray(this.props.value) && _typeof(this.props.value) === 'object';\n      }\n    }, {\n      key: 'mapToObject',\n      value: function mapToObject(map) {\n        return Array.from(map).reduce(function (obj, _ref4) {\n          var _ref5 = _slicedToArray(_ref4, 2),\n              k = _ref5[0],\n              value = _ref5[1];\n\n          obj[k] = value;\n          return obj;\n        }, {});\n      }\n    }, {\n      key: 'renderSelected',\n      value: function renderSelected() {\n        var _this2 = this;\n\n        if (this.props.multiple) {\n          var selectedItems = [].concat(_toConsumableArray(this.values())).map(function (_ref6) {\n            var _ref7 = _slicedToArray(_ref6, 2),\n                key = _ref7[0],\n                value = _ref7[1];\n\n            return _react2.default.createElement(Chip, {\n              key: key,\n              className: _this2.props.theme.value,\n              deletable: true,\n              onDeleteClick: _this2.unselect.bind(_this2, key)\n            }, value);\n          });\n          return _react2.default.createElement('ul', {\n            className: this.props.theme.values\n          }, selectedItems);\n        }\n      }\n    }, {\n      key: 'renderSuggestions',\n      value: function renderSuggestions() {\n        var _this3 = this;\n\n        var theme = this.props.theme;\n        var suggestions = [].concat(_toConsumableArray(this.suggestions())).map(function (_ref8) {\n          var _ref9 = _slicedToArray(_ref8, 2),\n              key = _ref9[0],\n              value = _ref9[1];\n\n          var className = (0, _classnames5.default)(theme.suggestion, _defineProperty({}, theme.active, _this3.state.active === key));\n          return _react2.default.createElement('li', {\n            id: key,\n            key: key,\n            className: className,\n            onMouseDown: _this3.handleMouseDown,\n            onMouseOver: _this3.handleSuggestionHover\n          }, value);\n        });\n        return _react2.default.createElement('ul', {\n          className: (0, _classnames5.default)(theme.suggestions, _defineProperty({}, theme.up, this.state.direction === 'up'))\n        }, suggestions);\n      }\n    }, {\n      key: 'render',\n      value: function render() {\n        var _this4 = this;\n\n        var _props = this.props,\n            allowCreate = _props.allowCreate,\n            error = _props.error,\n            label = _props.label,\n            source = _props.source,\n            suggestionMatch = _props.suggestionMatch,\n            query = _props.query,\n            selectedPosition = _props.selectedPosition,\n            keepFocusOnChange = _props.keepFocusOnChange,\n            showSuggestionsWhenValueIsSet = _props.showSuggestionsWhenValueIsSet,\n            showSelectedWhenNotInSource = _props.showSelectedWhenNotInSource,\n            onQueryChange = _props.onQueryChange,\n            theme = _props.theme,\n            other = _objectWithoutProperties(_props, ['allowCreate', 'error', 'label', 'source', 'suggestionMatch', 'query', 'selectedPosition', 'keepFocusOnChange', 'showSuggestionsWhenValueIsSet', 'showSelectedWhenNotInSource', 'onQueryChange', 'theme']);\n\n        var className = (0, _classnames5.default)(theme.autocomplete, _defineProperty({}, theme.focus, this.state.focus), this.props.className);\n        return _react2.default.createElement('div', {\n          'data-react-toolbox': 'autocomplete',\n          className: className\n        }, this.props.selectedPosition === 'above' ? this.renderSelected() : null, _react2.default.createElement(Input, _extends({}, other, {\n          ref: function ref(node) {\n            _this4.inputNode = node;\n          },\n          autoComplete: 'off',\n          className: theme.input,\n          error: error,\n          label: label,\n          onBlur: this.handleQueryBlur,\n          onChange: this.handleQueryChange,\n          onFocus: this.handleQueryFocus,\n          onKeyDown: this.handleQueryKeyDown,\n          onKeyUp: this.handleQueryKeyUp,\n          theme: theme,\n          themeNamespace: 'input',\n          value: this.state.query\n        })), this.renderSuggestions(), this.props.selectedPosition === 'below' ? this.renderSelected() : null);\n      }\n    }]);\n\n    return Autocomplete;\n  }(_react.Component);\n\n  Autocomplete.propTypes = {\n    allowCreate: _propTypes2.default.bool,\n    className: _propTypes2.default.string,\n    direction: _propTypes2.default.oneOf(['auto', 'up', 'down']),\n    disabled: _propTypes2.default.bool,\n    error: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.node]),\n    keepFocusOnChange: _propTypes2.default.bool,\n    label: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.node]),\n    multiple: _propTypes2.default.bool,\n    onBlur: _propTypes2.default.func,\n    onChange: _propTypes2.default.func,\n    onFocus: _propTypes2.default.func,\n    onKeyDown: _propTypes2.default.func,\n    onKeyUp: _propTypes2.default.func,\n    onQueryChange: _propTypes2.default.func,\n    query: _propTypes2.default.string,\n    selectedPosition: _propTypes2.default.oneOf(['above', 'below', 'none']),\n    showSelectedWhenNotInSource: _propTypes2.default.bool,\n    showSuggestionsWhenValueIsSet: _propTypes2.default.bool,\n    source: _propTypes2.default.any,\n    suggestionMatch: _propTypes2.default.oneOf(['disabled', 'start', 'anywhere', 'word', 'none']),\n    theme: _propTypes2.default.shape({\n      active: _propTypes2.default.string,\n      autocomplete: _propTypes2.default.string,\n      focus: _propTypes2.default.string,\n      input: _propTypes2.default.string,\n      suggestion: _propTypes2.default.string,\n      suggestions: _propTypes2.default.string,\n      up: _propTypes2.default.string,\n      value: _propTypes2.default.string,\n      values: _propTypes2.default.string\n    }),\n    value: _propTypes2.default.any\n  };\n  Autocomplete.defaultProps = {\n    allowCreate: false,\n    className: '',\n    direction: 'auto',\n    keepFocusOnChange: false,\n    multiple: true,\n    selectedPosition: 'above',\n    showSelectedWhenNotInSource: false,\n    showSuggestionsWhenValueIsSet: false,\n    source: {},\n    suggestionMatch: 'start'\n  };\n  return Autocomplete;\n};\n\nvar Autocomplete = factory(_Chip2.default, _Input2.default);\nexports.default = (0, _reactCssThemr.themr)(_identifiers.AUTOCOMPLETE, null, {\n  withRef: true\n})(Autocomplete);\nexports.autocompleteFactory = factory;\nexports.Autocomplete = Autocomplete;","map":null,"metadata":{},"sourceType":"script"}