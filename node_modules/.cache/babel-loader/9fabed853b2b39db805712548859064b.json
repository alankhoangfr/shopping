{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\AlankHoang\\\\Desktop\\\\freecodeacademy\\\\shoppingbasket\\\\client\\\\src\\\\components\\\\Map.js\";\nimport React, { Component } from 'react';\nimport { withGoogleMap, GoogleMap, withScriptjs, Marker } from \"react-google-maps\";\nimport Geocode from \"react-geocode\";\nimport Autocomplete from 'react-google-autocomplete';\nimport basket from \"../image/basket.png\";\nimport basketSelected from \"../image/basketSelected.png\";\nGeocode.setApiKey('AIzaSyBiffp6dvrIk_EWQHzXk05VzFKb5tioZeI');\nGeocode.enableDebug();\nexport class Map extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onPlaceSelected = (place, event) => {\n      console.log(place);\n\n      if (place.name !== undefined) {\n        Geocode.fromAddress(place.name).then(response => {\n          const _response$results$0$g = response.results[0].geometry.location,\n                lat = _response$results$0$g.lat,\n                lng = _response$results$0$g.lng;\n          console.log(lat, lng);\n          var markers1 = this.insideBound(this.state.markers, response.results[0].geometry.location);\n\n          if (lat === undefined) {\n            return null;\n          }\n\n          this.setState({\n            mapPosition: {\n              lat: lat,\n              lng: lng\n            },\n            markerPosition: {\n              lat: lat,\n              lng: lng\n            },\n            movePosition: {\n              lat: lat,\n              lng: lng\n            },\n            zoom: 12,\n            markers1: markers1,\n            input: true,\n            moving: false\n          });\n        });\n      } else {\n        const name = place.formatted_name,\n              latValue = place.geometry.location.lat(),\n              lngValue = place.geometry.location.lng();\n        var markers1 = this.insideBound(this.state.markers, place.geometry.location); // Set these values in the state.\n\n        this.setState({\n          mapPosition: {\n            lat: latValue,\n            lng: lngValue\n          },\n          markerPosition: {\n            lat: latValue,\n            lng: lngValue\n          },\n          movePosition: {\n            lat: latValue,\n            lng: lngValue\n          },\n          zoom: 12,\n          markers1: markers1,\n          input: true,\n          moving: false\n        });\n      }\n\n      this.props.markerSelected(\"\");\n      return;\n    };\n\n    this.mapmoved = () => {\n      console.log(\"mapMoved:\" + JSON.stringify(this.state.map.getBounds()));\n      var markers1 = this.insideBound_bound(this.state.markers, this.state.map.getBounds());\n      this.setState({\n        bound: this.state.map.getBounds(),\n        movePosition: {\n          lat: this.state.map.getCenter().lat(),\n          lng: this.state.map.getCenter().lng()\n        },\n        mapPosition: {\n          lat: this.state.map.getCenter().lat(),\n          lng: this.state.map.getCenter().lng()\n        },\n        markers1: markers1,\n        moving: true\n      });\n    };\n\n    this.maploaded = mapRef => {\n      console.log(\"maploaded\");\n\n      if (!mapRef) {\n        return;\n      }\n\n      this.setState({\n        map: mapRef,\n        maploading: true\n      });\n    };\n\n    this.onZoom = () => {\n      console.log(\"zoom:\" + this.state.map.getCenter(), this.state.map.getZoom());\n      var markers1 = this.insideBound_bound(this.state.markers, this.state.map.getBounds());\n      this.setState({\n        bound: this.state.map.getBounds(),\n        movePosition: {\n          lat: this.state.map.getCenter().lat(),\n          lng: this.state.map.getCenter().lng()\n        },\n        mapPosition: {\n          lat: this.state.map.getCenter().lat(),\n          lng: this.state.map.getCenter().lng()\n        },\n        markers1: markers1,\n        zoom: this.state.map.getZoom(),\n        moving: true\n      });\n    };\n\n    this.state = {\n      bound: null,\n      input: \"\",\n      mapPosition: {\n        lat: this.props.center.lat,\n        lng: this.props.center.lng\n      },\n      markerPosition: {\n        lat: this.props.center.lat,\n        lng: this.props.center.lng\n      },\n      movePosition: {\n        lat: this.props.center.lat,\n        lng: this.props.center.lng\n      },\n      map: null,\n      zoom: 10,\n      moving: false,\n      maploading: false,\n      markerSelected: \"\",\n      icon: \"\"\n    };\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    console.log(\"should Componeent update\", nextState, this.state);\n\n    if (nextState.input === true) {\n      console.log(\"change position\");\n      return true;\n    } else if (nextProps.selected !== this.props.selected) {\n      console.log(\"maker Change\");\n      return true;\n    } else if (this.check_markers1(nextState.markers1, this.state.markers1) === true) {\n      console.log(\"no change\");\n      return false;\n    }\n  }\n\n  render() {\n    console.log(this.state, \"rendering\");\n    const AsyncMap = withScriptjs(withGoogleMap(props => React.createElement(GoogleMap, {\n      ref: this.maploaded,\n      zoom: this.state.zoom,\n      defaultCenter: {\n        lat: this.props.lat,\n        lng: this.props.lng\n      },\n      center: {\n        lat: this.state.mapPosition.lat,\n        lng: this.state.mapPosition.lng\n      },\n      onDragEnd: this.mapmoved,\n      onZoomChanged: this.onZoom,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }, React.createElement(Autocomplete, {\n      style: {\n        width: '200%',\n        height: '40px',\n        paddingLeft: '16px',\n        margin: \"2px auto 20px auto\"\n      },\n      onPlaceSelected: this.onPlaceSelected,\n      types: ['(regions)'],\n      placeholder: \"Enter and select location\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }), React.createElement(Marker, {\n      draggable: true,\n      position: {\n        lat: this.state.markerPosition.lat,\n        lng: this.state.markerPosition.lng\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }))));\n    let map;\n    map = React.createElement(\"div\", {\n      style: {\n        width: \"100%\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }, React.createElement(AsyncMap, {\n      googleMapURL: \"https://maps.googleapis.com/maps/api/js?key=AIzaSyBiffp6dvrIk_EWQHzXk05VzFKb5tioZeI&libraries=places\",\n      loadingElement: React.createElement(\"div\", {\n        style: {\n          height: \"100%\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197\n        },\n        __self: this\n      }),\n      containerElement: React.createElement(\"div\", {\n        style: {\n          height: this.props.height,\n          display: \"flex\",\n          flexDirection: \"column-reverse\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200\n        },\n        __self: this\n      }),\n      mapElement: React.createElement(\"div\", {\n        style: {\n          height: \"100%\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }));\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211\n      },\n      __self: this\n    }, map);\n  }\n\n}\nexport default Map;","map":{"version":3,"sources":["C:\\Users\\AlankHoang\\Desktop\\freecodeacademy\\shoppingbasket\\client\\src\\components\\Map.js"],"names":["React","Component","withGoogleMap","GoogleMap","withScriptjs","Marker","Geocode","Autocomplete","basket","basketSelected","setApiKey","enableDebug","Map","constructor","props","onPlaceSelected","place","event","console","log","name","undefined","fromAddress","then","response","results","geometry","location","lat","lng","markers1","insideBound","state","markers","setState","mapPosition","markerPosition","movePosition","zoom","input","moving","formatted_name","latValue","lngValue","markerSelected","mapmoved","JSON","stringify","map","getBounds","insideBound_bound","bound","getCenter","maploaded","mapRef","maploading","onZoom","getZoom","center","icon","shouldComponentUpdate","nextProps","nextState","selected","check_markers1","render","AsyncMap","width","height","paddingLeft","margin","display","flexDirection"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { withGoogleMap, GoogleMap, withScriptjs, Marker  } from \"react-google-maps\";\r\nimport Geocode from \"react-geocode\"\r\nimport Autocomplete from 'react-google-autocomplete';\r\nimport basket from \"../image/basket.png\"\r\nimport basketSelected from \"../image/basketSelected.png\"\r\n\r\nGeocode.setApiKey('AIzaSyBiffp6dvrIk_EWQHzXk05VzFKb5tioZeI');\r\nGeocode.enableDebug();\r\n\r\n\r\nexport class Map extends Component {\r\n\tconstructor(props){\r\n\t\tsuper(props)\r\n\t\tthis.state = {\r\n\t\t\tbound:null,\r\n\t\t\tinput:\"\",\r\n\t\t\tmapPosition:{\r\n\t\t\t\tlat: this.props.center.lat,\r\n\t\t\t\tlng: this.props.center.lng\r\n\t\t\t},\r\n\t\t\tmarkerPosition:{\r\n\t\t\t\tlat:this.props.center.lat,\r\n\t\t\t\tlng:this.props.center.lng\r\n\t\t\t},\r\n\t\t\tmovePosition:{\r\n\t\t\t\tlat:this.props.center.lat,\r\n\t\t\t\tlng:this.props.center.lng\t\t\r\n\t\t\t},\r\n\t\t\tmap:null,\r\n\t\t\tzoom:10,\r\n\t\t\tmoving:false,\r\n\t\t\tmaploading:false,\r\n\t\t\tmarkerSelected:\"\",\r\n\t\t\ticon:\"\"\r\n\t\t}\r\n\t}\r\n\r\n\tshouldComponentUpdate( nextProps, nextState ){\t\r\n\t\tconsole.log(\"should Componeent update\", nextState, this.state)\r\n\t\tif(nextState.input===true){\r\n\t\t\tconsole.log(\"change position\")\r\n\t\t\treturn true\r\n\t\t}\r\n\t\telse if(nextProps.selected!==this.props.selected){\r\n\t\t\tconsole.log(\"maker Change\")\r\n\t\t\treturn true\r\n\t\t}\r\n\t\telse if (this.check_markers1(nextState.markers1,this.state.markers1)===true){\r\n\t\t\tconsole.log(\"no change\")\r\n\t\t\treturn false\r\n\t\t}\r\n\t}\r\n\tonPlaceSelected = ( place,event ) => {\r\n\t\tconsole.log(place)\r\n\t\tif (place.name!==undefined){\r\n\t\t\tGeocode.fromAddress(place.name).then(\r\n\t\t\t\tresponse => {\r\n    \t\t\tconst { lat, lng } = response.results[0].geometry.location\r\n    \t\t\tconsole.log(lat, lng)\r\n    \t\t\tvar markers1 = this.insideBound(this.state.markers,response.results[0].geometry.location)\r\n    \t\t\tif (lat ===undefined){\r\n    \t\t\t\treturn null\r\n    \t\t\t}\r\n    \t\t\tthis.setState({\r\n\t\t\t\t\tmapPosition: {\r\n\t\t\t\t\t\tlat: lat,\r\n\t\t\t\t\t\tlng: lng\r\n\t\t\t\t\t},\r\n\t\t\t\t\tmarkerPosition: {\r\n\t\t\t\t\t\tlat: lat,\r\n\t\t\t\t\t\tlng: lng\r\n\t\t\t\t\t},\r\n\t\t\t\t\tmovePosition: {\r\n\t\t\t\t\t\tlat: lat,\r\n\t\t\t\t\t\tlng: lng\r\n\t\t\t\t},\r\n\t\t\t\t\tzoom:12,\r\n\t\t\t\t\tmarkers1:markers1,\r\n\t\t\t\t\tinput:true,\r\n\t\t\t\t\tmoving:false,\r\n\t\t\t})\r\n    \t\t})\r\n\t\t}\r\n\t\telse{\r\n\t\t\tconst name = place.formatted_name,\r\n\t\t\tlatValue = place.geometry.location.lat(),\r\n\t\t\tlngValue = place.geometry.location.lng();\r\n\t\t\tvar markers1 = this.insideBound(this.state.markers,place.geometry.location)\r\n\t\t\t// Set these values in the state.\r\n\t\t\tthis.setState({\r\n\t\t\t\tmapPosition: {\r\n\t\t\t\t\tlat: latValue,\r\n\t\t\t\t\tlng: lngValue\r\n\t\t\t\t},\r\n\t\t\t\tmarkerPosition: {\r\n\t\t\t\t\tlat: latValue,\r\n\t\t\t\t\tlng: lngValue\r\n\t\t\t\t},\r\n\t\t\t\tmovePosition: {\r\n\t\t\t\t\tlat: latValue,\r\n\t\t\t\t\tlng: lngValue\r\n\t\t\t\t},\r\n\t\t\t\tzoom:12,\r\n\t\t\t\tmarkers1:markers1,\r\n\t\t\t\tinput:true,\r\n\t\t\t\tmoving:false,\r\n\t\t\t})\r\n\t\t}\r\n\tthis.props.markerSelected(\"\")\r\n\treturn\r\n\t};\r\n\tmapmoved=()=>{\r\n\t\tconsole.log(\"mapMoved:\"+JSON.stringify(this.state.map.getBounds()))\r\n\t\tvar markers1 = this.insideBound_bound(this.state.markers,this.state.map.getBounds())\r\n\t\tthis.setState({\r\n\t\t\tbound:this.state.map.getBounds(),\r\n\t\t\tmovePosition: {\r\n\t\t\t\tlat: this.state.map.getCenter().lat(),\r\n\t\t\t\tlng: this.state.map.getCenter().lng()\r\n\t\t\t},\r\n\t\t\tmapPosition: {\r\n\t\t\t\tlat: this.state.map.getCenter().lat(),\r\n\t\t\t\tlng: this.state.map.getCenter().lng()\r\n\t\t\t},\r\n\t\t\tmarkers1:markers1 ,\r\n\t\t\tmoving:true\t\r\n\t\t})\r\n\t}\r\n\tmaploaded=(mapRef)=>{\r\n\t\tconsole.log(\"maploaded\")\r\n\t\tif(!mapRef){\r\n\t\t\treturn\r\n\t\t}\r\n\t\tthis.setState({\r\n\t\t\tmap:mapRef,\r\n\t\t\tmaploading:true})\t\r\n\t}\r\n\tonZoom = ()=>{\r\n\t\tconsole.log(\"zoom:\"+this.state.map.getCenter(),this.state.map.getZoom())\r\n\t\tvar markers1 = this.insideBound_bound(this.state.markers,this.state.map.getBounds())\r\n\t\tthis.setState({\r\n\t\t\tbound:this.state.map.getBounds(),\r\n\t\t\tmovePosition: {\r\n\t\t\t\tlat: this.state.map.getCenter().lat(),\r\n\t\t\t\tlng: this.state.map.getCenter().lng()\r\n\t\t\t},\r\n\t\t\tmapPosition: {\r\n\t\t\t\tlat: this.state.map.getCenter().lat(),\r\n\t\t\t\tlng: this.state.map.getCenter().lng()\r\n\t\t\t},\r\n\t\t\tmarkers1:markers1,\r\n\t\t\tzoom:this.state.map.getZoom(),\r\n\t\t\tmoving:true\t\r\n\t\t})\r\n\t}\r\n \t\t\r\n\trender() {\r\n\tconsole.log(this.state,\"rendering\")\r\n\t\r\n\tconst AsyncMap = withScriptjs(\r\n\t\twithGoogleMap(\r\n\t\t\tprops => (\r\n\t\t\t\t<GoogleMap \r\n\t\t\t\tref = {this.maploaded}\r\n\t\t\t\tzoom={this.state.zoom}\r\n\t\t\t\tdefaultCenter={{ lat: this.props.lat, lng: this.props.lng }}\r\n\t\t\t\tcenter={{ lat: this.state.mapPosition.lat, lng: this.state.mapPosition.lng }}\r\n\t\t\t\tonDragEnd={this.mapmoved}\r\n\t\t\t\tonZoomChanged = {this.onZoom}\r\n\t\t\t\t>\r\n\t\t\t\t\t<Autocomplete\r\n\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\twidth: '200%',\r\n\t\t\t\t\t\theight: '40px',\r\n\t\t\t\t\t\tpaddingLeft: '16px',\r\n\t\t\t\t\t\tmargin:\"2px auto 20px auto\",\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t\tonPlaceSelected={ this.onPlaceSelected }\r\n\t\t\t\t\t\ttypes={['(regions)']}\r\n\t\t\t\t\t\tplaceholder={\"Enter and select location\"}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<Marker \r\n\t\t\t\t\t\tdraggable={true}\r\n\t\t\t\t\t\tposition={{ lat: this.state.markerPosition.lat, lng: this.state.markerPosition.lng }}\r\n\t\t\t\t\t/>\r\n\t\r\n\t\t\t\t</GoogleMap>\r\n\t\t\t)\r\n\t\t)\r\n\t)\r\n\tlet map\r\n\tmap =  <div style={{width:\"100%\"}} >\r\n\t\t\t<AsyncMap\r\n\t\t\t\tgoogleMapURL= \"https://maps.googleapis.com/maps/api/js?key=AIzaSyBiffp6dvrIk_EWQHzXk05VzFKb5tioZeI&libraries=places\"\r\n\t\t\t\tloadingElement={\r\n\t\t\t\t <div style={{ height: `100%` }} />\r\n\t\t\t\t}\r\n\t\t\t\tcontainerElement={\r\n\t\t\t\t <div style={{ height: this.props.height,\r\n  \t\t\t\t\t\t\t\tdisplay: \"flex\",\r\n  \t\t\t\t\t\t\t\tflexDirection: \"column-reverse\"}} />\r\n\t\t\t\t}\r\n\t\t\t\tmapElement={\r\n\t\t\t\t <div style={{ height: `100%` }} />\r\n\t\t\t\t}\r\n\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\treturn (\r\n\t\t<React.Fragment>\r\n\t\t\t{map}\r\n\t\t</React.Fragment> \r\n\t)\r\n  }\r\n}\r\n\r\nexport default Map"]},"metadata":{},"sourceType":"module"}